<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ubantu配置django开发环境</title>
    <link href="/2020/01/16/ubantu%E9%85%8D%E7%BD%AEdjango%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <url>/2020/01/16/ubantu%E9%85%8D%E7%BD%AEdjango%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="预备"><a href="#预备" class="headerlink" title="预备"></a>预备</h2><ol><li>Ubantu镜像</li><li>Python3</li><li>pip3</li><li>pymysql</li><li>Django2.2</li><li>Mysql数据库</li><li>virtualenv虚拟环境</li></ol><h3 id="在VirtualBox上安装Ubantu操作系统"><a href="#在VirtualBox上安装Ubantu操作系统" class="headerlink" title="在VirtualBox上安装Ubantu操作系统"></a>在VirtualBox上安装Ubantu操作系统</h3><p>新建虚拟机，选择类型linux,选择版本ubantu64-bit，分配内存4gb，选择创建虚拟硬盘，配置好之后，在设置里，设置显存大小128m，启动3d加速.<br><img src="/2020/01/16/ubantu%E9%85%8D%E7%BD%AEdjango%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/2.png" srcset="/img/loading.gif" width="400px" height="250px"><br>应用设置，并启动系统，再开始界面选择需要导入的ios镜像，进入ubantu安装界面，并完成安装指导，建议自己分区。<br>ubantu系统内已配置python3，所以只需要安装后续软件即可。<br>进入系统后打开terminal，首先输入dpkg -l 查看已安装软件，是否有python，如果有则不需要再安装python。</p><h3 id="安装pip3"><a href="#安装pip3" class="headerlink" title="安装pip3"></a>安装pip3</h3><pre><code>sudo apt-get update        //更新软件源sudo apt-get install python3-pip  pip3 --version  //查看版本sudo pip3 list //查看已安装的lib</code></pre><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><pre><code>sudo apt-get install mysql-server mysql-clientsudo service mysql restartmysql -uroot -p        //进入mysql命令界面</code></pre><p><img src="/2020/01/16/ubantu%E9%85%8D%E7%BD%AEdjango%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/3.png" srcset="/img/loading.gif" width="400px" height="250px"></p><h3 id="安装pymysql"><a href="#安装pymysql" class="headerlink" title="安装pymysql"></a>安装pymysql</h3><pre><code>pip3 install pymysql</code></pre><h3 id="安装virtualenv与virtualenvwrapper"><a href="#安装virtualenv与virtualenvwrapper" class="headerlink" title="安装virtualenv与virtualenvwrapper"></a>安装virtualenv与virtualenvwrapper</h3><pre><code>sudo pip3 install virtualenvsudo pip3 install virtualenvwrapper</code></pre><p>安装好virtualenvwrapper后还无法使用，创建目录存放虚拟环境</p><pre><code>mkdir $HOME/.virtualenvs</code></pre><p>在~/.bashrc中添加</p><pre><code>export WORKON_HOME=$HOME/.virtualenvsexport VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3source /usr/local/bin/virtualenvwrapper.sh</code></pre><p>运行</p><pre><code>source ~/.bashrc</code></pre><p>创建python3虚拟环境</p><pre><code>mkvirtualenv -p 路径 /usr/bin/pythonX删除:rmvirtualenv 虚拟环境名称进入: workon 虚拟环境名称</code></pre><p>其他命令</p><pre><code>python -v  //进度python命令终端deactivate //退出虚拟环境pip freeze 查看虚拟环境安装的包</code></pre><h3 id="安装Django"><a href="#安装Django" class="headerlink" title="安装Django"></a>安装Django</h3><pre><code>pip install Django==1.11.7django-admin startproject xxx 创建项目python manage.py startapp xxx 创建一个应用</code></pre><p>执行 python manage.py runserver 访问localhost:8000,看到it works则项目启动成功！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>网络基础</title>
    <link href="/2020/01/16/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/01/16/%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="局域网与广域网"><a href="#局域网与广域网" class="headerlink" title="局域网与广域网"></a>局域网与广域网</h2><h3 id="局域网："><a href="#局域网：" class="headerlink" title="局域网："></a><strong>局域网</strong>：</h3><p>局域网是一种私有网络，一般在一座建筑物内或建筑物附近，比如家庭、办公室或工厂。局域网络被广泛用来连接个人计算机和消费类电子设备，使它们能够共享资源和交换信息。当局域网被用于公司时，它们就称为企业网络。</p><blockquote><p>特点：覆盖范围小，设备自己购买，带宽固定，自己维护。</p></blockquote><h3 id="广域网："><a href="#广域网：" class="headerlink" title="广域网："></a><strong>广域网</strong>：</h3><p>在一个区域范围里超过集线器所连接的距离时，必须要通过路由器来连接，这种网上类型称为广域网。如果有北、中、南等分公司，甚至海外分公司，把这些分公司以专线方式连接起来，即称为“广域网”，广域网由各大运行商进行维护和建设，覆盖范围广，给用户提供服务。</p><blockquote><p>解释：ISP(Internet Service Provider)：互联网服务提供商。每个运行商都有自家的机房，各互联网公司通过租用运行商机房里的服务器，搭建自己的公司网站，所以电信网络访问在电信机房的网站就会快很多。为了避免因服务器所属不同产生的网络访问慢的问题，也有了双线机房的诞生，即多个运行商共有一个机房。</p></blockquote><h3 id="Internet："><a href="#Internet：" class="headerlink" title="Internet："></a><strong>Internet</strong>：</h3><p>internet表示的意思是互联网，又称网际网路，根据音译也被叫做因特网(Internet)、英特网，是网络与网络之间所串连成的庞大网络。这些网络以一组通用的协议相连，形成逻辑上的单一且巨大的全球化网络，在这个网络中有交换机、路由器等网络设备、各种不同的连接链路、种类繁多的服务器和数不尽的计算机、终端。</p><blockquote><p>中国互联网由电信，移动，联通，网通等等运行商组成，用户可以通过各地运行商提供的接口进而访问到全国互联网，并且各运行商提供与国外互联网的接口，进而访问全球互联网.</p></blockquote><h2 id="互联网如何进行数据的传输？"><a href="#互联网如何进行数据的传输？" class="headerlink" title="互联网如何进行数据的传输？"></a>互联网如何进行数据的传输？</h2><h3 id="数据帧与数据包"><a href="#数据帧与数据包" class="headerlink" title="数据帧与数据包"></a>数据帧与数据包</h3><p>每个网络都有属于自己的ip地址，每台设备也有唯一的Mac地址。当用户访问网站时，需要将域名传输给DNS，然后DNS返回相应的IP地址，然后将数据和本机IP地址以及目标IP地址进行打包(数据包)，为了将数据包通过路由器进行传输，还需要将当前mac地址以及下一个路由器的mac地址同样打包进去(数据帧),通过不断改变mac地址，进而将数据传输给服务器。</p><blockquote><p>DNS:域名解析服务器</p></blockquote><h3 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h3><ul><li>应用层 所有能产生网络流量的程序</li><li>表示层 在传输之前是否进行加密或压缩处理，二进制或ASCII表示</li><li>会话层 浏览器与网站服务器建立会话，确保服务器传输来的信息渲染相对的页面 可以通过对话查木马 netstat -n</li><li>传输层 可靠传输 流量控制 不可靠传输(不需要建立会话，一个数据包便可完成交流)</li><li>网络层 负责选择最佳路径，规划IP地址</li><li>数据链路层 帧的开始和结束如何定义 透明传输 差错校验</li><li>物理层 接口标准(网线) 电器标准 如何在物理链路上传输更快的速度</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>英语短语整理</title>
    <link href="/2020/01/15/%E8%8B%B1%E8%AF%AD%E7%9F%AD%E8%AF%AD%E6%95%B4%E7%90%86/"/>
    <url>/2020/01/15/%E8%8B%B1%E8%AF%AD%E7%9F%AD%E8%AF%AD%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="英语短语整理"><a href="#英语短语整理" class="headerlink" title="英语短语整理"></a>英语短语整理</h2><hr><h3 id="1-Queen-Agrees-to-Period-of-Transition-for-Harry-and-Meghan"><a href="#1-Queen-Agrees-to-Period-of-Transition-for-Harry-and-Meghan" class="headerlink" title="1.Queen Agrees to Period of Transition for Harry and Meghan."></a>1.Queen Agrees to Period of Transition for Harry and Meghan.</h3><ul><li>forge a new life 创造新生活</li><li>period of transistion 过渡期</li><li>following a day of … 什么事情之后的一天</li><li>thrown … into turmoil 引起骚乱</li><li>Britain’s monarchy 英国君主制</li><li>dominated the headlines for days 占据头条</li><li>remote prospect 机会渺茫</li><li>carve out 创造雕刻</li><li>back away from 躲开</li><li>in the coming days 在未来几天</li><li>make clear that 明确表示</li><li>be reliant on 依赖</li><li>on the lookout 注意，留心</li><li>cash in 从中牟利，捞到好处</li></ul><hr>]]></content>
    
    
    
    <tags>
      
      <tag>English</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冯诺依曼体系</title>
    <link href="/2020/01/14/%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E4%BD%93%E7%B3%BB/"/>
    <url>/2020/01/14/%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E4%BD%93%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div id="aplayer-oryMiOSh" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="477417503" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div><h2 id="冯诺依曼简介"><a href="#冯诺依曼简介" class="headerlink" title="冯诺依曼简介"></a>冯诺依曼简介</h2><p>约翰·冯·诺依曼，美籍匈牙利数学家、计算机科学家、物理学家，毕业于苏黎世联邦工业大学，他是现代电子计算机与博弈论的重要创始人，被后人称为现代计算机之父、博弈论之父，并且他还改善了著名的蒙特卡洛算法。<br>1945年6月约翰·冯·诺依曼与戈德斯坦、勃克斯等人，联名发表了一篇长达101页纸的报告，即计算机史上著名的“101页报告”。在报告中冯·诺伊曼明确提出了计算机的体系架构。从1951年第一台电子计算机EDVAC开始，计算机经历了多次的更新换代，不管是最原始的、还是最先进的计算机，使用的仍然是冯·诺依曼最初设计的计算机体系结构。因此冯·诺依曼被世界公认为“计算机之父”，他设计的计算机系统结构，称为“冯诺依曼体系结构”。</p><h2 id="冯诺依曼体系"><a href="#冯诺依曼体系" class="headerlink" title="冯诺依曼体系"></a>冯诺依曼体系</h2><p>冯诺依曼体系结构主要由五大部分组成，分别是控制器，运算器，存储器，输入设备和输出设备。至今为止，基本上所有的计算机也是遵循冯诺依曼体系所设计的，例如我们经常使用的手机，电脑，平板等等。<br>冯诺依曼提出的两个重要的思想，一个是存储程序的思想，另一个是二进制的思想，这两个思想在如今的计算机领域影响深远。<br>世界上第一台计算机EDVAC，采用了上千个电子管所设计的，体积十分庞大，设计者采用十进制对指令和数据进行计算处理，但执行过程复杂，运行效率慢。十进制与二进制的区别在哪？冯诺依曼为何提出二进制的存储思想呢？因为在早期的计算机电子元件设计中，通常使用高低电压来表示信息，即高电压为1，低电压为0.所以如果要采用十进制进行数据的计算，将二进制信息转换成我们日常所熟悉的十进制后再去进行处理，大大增加了计算机指令的设计难度，而使用二进制则解决了这一问题，后世很多科学家也提出了二进制浮点数的计算，以及反码补码阶码的概念，使二进制成为了计算机设计的中心。所以在今后的计算机中无论是指令还是数据都采用二进制的方式进行存储和计算。<br><img src="/2020/01/14/%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E4%BD%93%E7%B3%BB/1.jpg" srcset="/img/loading.gif" width="375px" height="220px"><br>通常我们使用的计算机主要功能是负责运算，所以在冯诺依曼体系中以运算器为中心，而存储器负责存放指令和数据，指令和数据的计算和存储以及外部设备的连接也需要通过控制器进行控制。让我们排除输入输出设备之后，其实运算器，存储器和控制器才是整个计算机的核心，我们可以将三者看作一个黑箱子。当我们输入数据时，数据通过黑箱子，然后输出我们想要的结果，这便是图灵机的简单模型。</p><h2 id="冯诺依曼体系的特点"><a href="#冯诺依曼体系的特点" class="headerlink" title="冯诺依曼体系的特点"></a>冯诺依曼体系的特点</h2><ol><li>计算机由五大部件组成，运算器，存储器，控制器，输入设备，输出设备。</li><li>指令和数据采用二进制方式进行存储。</li><li>指令由地址码和操作码组成。</li><li>运算器为中心。</li><li>存储程序为主要思想。</li><li>指令和数据都以同等地位存入存储器，并且可按地址访问。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>心情随笔</title>
    <link href="/2020/01/12/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/"/>
    <url>/2020/01/12/%E5%BF%83%E6%83%85%E9%9A%8F%E7%AC%94/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div id="aplayer-odrXVmkP" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1352045760" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"></div><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>最近越来越喜欢写博客了，感觉就是自己向自己倾诉一样，或许这也是一些感情的寄托吧。自从参加了两次数学建模比赛，也发现自己的写作能力开始慢慢变强了，同时也明白了为什么有一些人喜欢写日记，因为这也是记录自己点点滴滴的一种方式吧，能让自己感觉到存在的意义。<br>自从大学以后感觉更加孤独了，学技术是寂寞的，枯燥的，只有做出一些作品，才会带给自己很多真实的成就感。这种感觉很奇妙，能让自己感觉到充实，感觉自己是活着的，感觉自己的人生是有意义的。</p><h2 id="倾诉"><a href="#倾诉" class="headerlink" title="倾诉"></a>倾诉</h2><p>最近学校放寒假了，也回家了。回家后避免不了受到父母的各种唠叨，以及亲戚朋友各种“友善”的人生建议，感觉活着越来越累了，想要变的优越一些，但又克服不了那些臭毛病，想要脱单，但心里没有什么喜欢的人，也没人喜欢，自卑在心底已经生根发芽了，最终想想罢了，还是回归现实吧。<br>回家后听到亲戚朋友闲聊，听说别人家的孩子现在创办了公司，一年盈利几百万。听说别人家的孩子最近考上了研究生，毕业以后也不用担心了。听说别人家的孩子，今年高考考进了名牌大学。听说别人家的孩子最近又出国了。听说别人家的孩子……<br>而自己呢？<br>越来越焦虑了，其实我只想当一个普通人罢了，但现在普通人的标准貌似也越来越高了，学习计算机对于父母而言，只不过是整日坐在电脑旁边虚度光阴罢了。挣扎着想要反驳一些什么，想想觉得还是算了，只会让自己更累。</p><blockquote><p>二十而立，三十不惑，四十知天命，如今自己刚过二十岁年纪，却感觉心里已经更老了十岁，人生就是这样，得过且过，顺其自然吧</p></blockquote><hr><p>抱怨就到这里，谈谈未来的人生规划和目标。</p><hr><ol><li>努力学习，考研计算机方向</li><li>毕业后好好工作，乐观生活</li><li>有一套属于自己的小房子</li><li>养一只猫</li><li>吃好喝好</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>考研的想法</title>
    <link href="/2020/01/11/%E8%80%83%E7%A0%94%E7%9A%84%E6%83%B3%E6%B3%95/"/>
    <url>/2020/01/11/%E8%80%83%E7%A0%94%E7%9A%84%E6%83%B3%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这篇博客只是阐述以下我最近的想法，估计大部分人也不会看我的博客。如果有人不幸看到了的话，可以给我一些建议，谢谢。</p><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>首先自我介绍一下，我是2018年的陕西高考考生，由于高考失利，加上地区政策要合并二三本等等，高考失败后没有复读，而是去选择上民办的三本学校（虽然现在已经没三本了），然后选择了计算机科学专业，因为我本身也是比较喜欢编程的，开学后就开始自学编程语言，做一些小程序。</p><h2 id="最初的想法"><a href="#最初的想法" class="headerlink" title="最初的想法"></a>最初的想法</h2><p>刚开始我并没有考研的想法，只想着努力学技术，毕业后靠技术吃饭，我一直认为IT这个行业跟学历的关系并不大，只要你的技术强硬，一些大厂总有机会进去，工资也会很高。于是我就去学安卓，学网站等等，自学了不少东西，也做过一些demo。但由于只学专业课，我数学英语都不怎么好，四级也没过，只有专业课还凑合。</p><h2 id="考研想法的由来"><a href="#考研想法的由来" class="headerlink" title="考研想法的由来"></a>考研想法的由来</h2><p>目前大二上学期已经结束了，前一段时间跟我的专业课老师交流，他跟我聊他以前做的很多项目，那些项目都需要用一些复杂的算法去实现，还需要对计算机的深入理解，都是一些偏底层的东西，比如有关卫星，燃气，有色金属等等的项目。<br>然后我问他关于毕业工作的问题，需要学习多少技术，毕业后需不需要再去培训。<br>他给我分析了目前社会上的一些培训班，他们培训的东西都是一些java的电商项目，web前端等等，连微服务都涉及不到，至于培训python与人工智能的，大部分也是涉及较浅，用处不大。而且这些新技术、新框架过时的也很快。这些东西完全可以自学没必要报培训班。<br>建议我如果深入学计算机，想未来爬的高一点，还是需要考研的。</p><h2 id="如何考研？"><a href="#如何考研？" class="headerlink" title="如何考研？"></a>如何考研？</h2><p>在此之后我考研的念头就萌发了，这些天我一直在想一个问题，作为一个好歹算是科班出身的毕业生，我并不想学了四年结果毕业后和培训班一年出来的人一样的水准，甚至还不如。所以我毅然决定考研，如今遇到以下问题。</p><ul><li>1.三本学生如何选择考研学校？</li><li>2.基础薄弱怎么规划自己的学习?</li><li>3.现阶段应该怎么准备？</li></ul><h3 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h3><p>由于我也是比较现实的人，对自己的能力有所认知，所以我并不打算去考一些985，211名校，但也希望尽量上一个cs专业强一点的普通一本并争一争211学校的名额。<br>希望学长学姐以及有过考研经验的人可以给我一些帮助和建议，谢谢！</p>]]></content>
    
    
    
    <tags>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵转换</title>
    <link href="/2020/01/03/%E7%9F%A9%E9%98%B5%E8%BD%AC%E6%8D%A2/"/>
    <url>/2020/01/03/%E7%9F%A9%E9%98%B5%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="矩阵转换"><a href="#矩阵转换" class="headerlink" title="矩阵转换"></a>矩阵转换</h2><p>矩阵可以看作是一个向量的函数，则矩阵可以表示变换。<br>假设有以下向量(x,y),如何让该向量每个点横坐标扩大a倍，纵坐标扩大b倍，根据矩阵的点乘性质，则可以推出<br><img src="/2020/01/03/%E7%9F%A9%E9%98%B5%E8%BD%AC%E6%8D%A2/wz1.png" srcset="/img/loading.gif" width="400px" height="100px"><br>假设矩阵还可以表示一个图形，那么如何将图形关于x轴翻转，也可以通过点乘另一个矩阵进行转换。例如<br><img src="/2020/01/03/%E7%9F%A9%E9%98%B5%E8%BD%AC%E6%8D%A2/wz2.png" srcset="/img/loading.gif" width="400px" height="100px"><br>由此也可以推广出更多的转换。</p><hr><p>关于y轴的翻转<br><img src="/2020/01/03/%E7%9F%A9%E9%98%B5%E8%BD%AC%E6%8D%A2/wz3.png" srcset="/img/loading.gif" width="400px" height="100px"><br>关于原点的翻转<br><img src="/2020/01/03/%E7%9F%A9%E9%98%B5%E8%BD%AC%E6%8D%A2/wz4.png" srcset="/img/loading.gif" width="400px" height="100px"><br>沿x方向错切<br><img src="/2020/01/03/%E7%9F%A9%E9%98%B5%E8%BD%AC%E6%8D%A2/wz5.png" srcset="/img/loading.gif" width="400px" height="100px"><br>沿y方向错切<br><img src="/2020/01/03/%E7%9F%A9%E9%98%B5%E8%BD%AC%E6%8D%A2/wz6.png" srcset="/img/loading.gif" width="400px" height="100px"><br>关于原点进行旋转sitar角度<br><img src="/2020/01/03/%E7%9F%A9%E9%98%B5%E8%BD%AC%E6%8D%A2/wz7.png" srcset="/img/loading.gif" width="400px" height="100px"></p><h2 id="单位矩阵"><a href="#单位矩阵" class="headerlink" title="单位矩阵"></a>单位矩阵</h2><p>如果一个矩阵点乘另一个矩阵，矩阵的每一个元素没有发生任何变化，则称这种矩阵为单位矩阵。<br><img src="/2020/01/03/%E7%9F%A9%E9%98%B5%E8%BD%AC%E6%8D%A2/wz8.png" srcset="/img/loading.gif" width="250px" height="130px"></p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ul><li>单位矩阵的主对角线全为1.</li><li>单位矩阵一定是方阵.</li><li>假设单位矩阵为I，另一个矩阵为A，则I · A = A，A · I = A</li></ul><h2 id="矩阵的逆"><a href="#矩阵的逆" class="headerlink" title="矩阵的逆"></a>矩阵的逆</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>在数字系统中，除了0之外，X * 1/X = 1.<br>那么在矩阵中，设矩阵A，B。如果A · B = B · A = I，则称B为A的逆矩阵，记作B = 1/A.</p><h3 id="性质与推广"><a href="#性质与推广" class="headerlink" title="性质与推广"></a>性质与推广</h3><ul><li>在矩阵系统中，有一些矩阵并没有逆矩阵。如果矩阵A存在逆矩阵，则称A为可逆矩阵，或者叫非奇异矩阵(non-singular)，相反如果矩阵不可逆，则称为不可逆矩阵，或者奇异矩阵(singular)。</li><li>如果存在矩阵A，B，C，B·A = I，则称B是A的左逆矩阵。如果A·C = I，则称C是A的右逆矩阵。</li><li>如果一个矩阵A既存在左逆矩阵B，又存在右逆矩阵C，则B=C。</li><li>对于矩阵A,如果存在逆矩阵B，则B唯一。</li><li>可逆矩阵一定为方阵，非方阵一定不可逆。</li><li>A的0次方 = I，A的-1次方为A的逆。</li><li>矩阵的逆的转置等于矩阵的转置的逆。</li><li><img src="/2020/01/03/%E7%9F%A9%E9%98%B5%E8%BD%AC%E6%8D%A2/wz9.png" srcset="/img/loading.gif" width="250px" height="130px"></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>线性代数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于javaSwing数据绑定及刷新</title>
    <link href="/2020/01/02/%E5%85%B3%E4%BA%8EjavaSwing%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%8F%8A%E5%88%B7%E6%96%B0/"/>
    <url>/2020/01/02/%E5%85%B3%E4%BA%8EjavaSwing%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%8F%8A%E5%88%B7%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>最近学校期末了，正在进行java实训，实训要做一个图书管理系统。对于实现mysql数据库数据在JTable上的绑定，以及数据更新后界面的刷新时，遇到了问题。由于我对于JavaSwing完全不了解 ，实训时也是现学现卖，所以不清楚如何将数据绑定到JTable上。看了很多CSDN的博客，最后采用了以下方法。</p><h3 id="关于数据绑定的实现"><a href="#关于数据绑定的实现" class="headerlink" title="关于数据绑定的实现"></a>关于数据绑定的实现</h3><p>首先创建针对数据的模型类,以下的模型类是基于自定义Book表的简单示范</p><pre><code>/*book_list*/public class book_list extends javax.swing.table.DefaultTableModel{Class[] types = new Class[] { java.lang.Object.class, java.lang.String.class,            java.lang.String.class}; public book_list() {        super(new Object[][] {}, new String[] { &quot;bookname&quot;, &quot;booktype&quot;});}}</code></pre><p>然后对数据表进行填充，创建book对象，读取数据库中的数据后进行对象的赋值。利用循环将所有数据存入List中，而后利用循环从List中依次取得对象，并将各属性存入boo_list创建的对象中。然后创建JTable实体用model进行填充。这样可以将数据库的信息转换成可以填充JTable的对象。从而完成数据绑定的操作。</p><pre><code>    //图书表的创建    public static book_list model2 = new book_list();    public static JTable table2 = new JTable(model2);    ArrayList&lt;Book&gt; list = new ArrayList&lt;Book&gt;();    try {        sqlBookcod sql = new sqlBookcod();        ResultSet rs = sql.searchBook();        while (rs.next()) {            Book book = new Book();            book.setName(rs.getString(&quot;bookname&quot;));            book.setBookType(rs.getString(&quot;booktype&quot;));            list.add(book);        }    }catch(SQLException e) {        e.printStackTrace();    }    for (int i = 0; i &lt; list.size(); i++) {        Book b = (Book) list.get(i);        model2.addRow(new Object[] {b.getName(),b.getBookType()});    }}</code></pre><h3 id="数据更新"><a href="#数据更新" class="headerlink" title="数据更新"></a>数据更新</h3><p>当时进行数据绑定后，直接将table添加到panel中，当数据更新后，table中的数据已经被定死了。所以我采用了简单粗暴的方法，通过监听菜单栏的点击事件，直接删除table中的所有数据，然后重新进行填充，并删除panel中的table控件，重新添加table，从而实现数据表的更新。</p><pre><code>//图书表清空数据public static void delmodel2() {    model2 = new book_list();    table2 = new JTable(model2);}public void stateChanged(ChangeEvent e) {                    if(tabbedPane.getSelectedIndex() == 0) {        panel1.remove(p1);                    //删除panel1中原有的组件            tablepan.delmodel1();                //删除数据表内容                            p1 = tablepan.createTextPanel1();    //重新填充数据表        panel1.add(p1);        panel1.repaint();                     //对panel1本身进行重绘    }}</code></pre><hr><h3 id="界面如下"><a href="#界面如下" class="headerlink" title="界面如下"></a>界面如下</h3><p><img src="/2020/01/02/%E5%85%B3%E4%BA%8EjavaSwing%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%8F%8A%E5%88%B7%E6%96%B0/wz1.png" srcset="/img/loading.gif" width="400px" height="250px"></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019个人总结</title>
    <link href="/2020/01/01/2019%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    <url>/2020/01/01/2019%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="2019总结与反省"><a href="#2019总结与反省" class="headerlink" title="2019总结与反省"></a>2019总结与反省</h1><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>当初带着坚定学习的决心，来到了大学校园，或许很多人并不清楚自己的目标是什么，我也一样。 我曾经不止一次问过自己，我为什么要学习计算机。 到最后也没有一个合适的理由说服自己，大概因为我什么也不会，除了带着点对计算机的兴趣与热爱之外，我不清楚自己还爱好着什么，也不知道自己将来要面对什么，也正如大多数人一样，只是为了生活去奋斗罢了。</p><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><p>当初想着靠学技术到毕业工作，也努力学习了很多新技术，不再只会用c/c++敲黑窗口程序。图形界面程序从windowSdk到mfc又到winform，从winform到pythonGUI再到javaSwing。期间接触了很多编程语言，数据库技术，还有web前端技术以及一些网络的知识，服务器知识等。也了解过几种框架，入门过游戏引擎，做出了一些努力，但也曾有一段时间沉迷游戏，荒废时间。</p><h2 id="学业"><a href="#学业" class="headerlink" title="学业"></a>学业</h2><p>数学英语等课程依旧是这么差，技术水平增长缓慢也令我焦虑。当初只想搞技术的我，为其花费了大量的时间，导致我英语跟数学等科目没有跟上进度，现在悔悟基础课是多么重要。<br>当初坚定不打算考研的我，也在今年慢慢动摇，并决定考研一战。<br>感觉2019有收获也有后悔，自己所做出的努力在别人眼中或许根本不算努力，但总之没有自甘堕落，还有着目标和执行力。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><h3 id="经历"><a href="#经历" class="headerlink" title="经历:"></a>经历:</h3><ul><li>年初参加蓝桥杯编程比赛拿到省三等奖。</li><li>肝封印者达到450w战力后弃坑。</li><li>假期学习unity做过几个小demo。</li><li>参加数学建模校赛，拿到三等奖，并得到333元奖金。</li><li>在学校创办兼职，写过python脚本程序处理excel。</li><li>担任学校计算机协会团支书并且给大一学生讲课。</li><li>买了服务器，但只玩了聊天室。</li><li>举办社团活动给学校师生修电脑。</li><li>学习Linux。</li><li>入坑古剑奇谭并且版本毕业。</li><li>看完了几本小说。</li><li>思考人生ing。</li><li>参加全国大学生数学建模比赛，拿到省一等奖。</li><li>入坑Django，重新复习前端。</li><li>莫名其妙进了学校实验班。</li><li>个人博客坏了一次，所有的文章丢失，又重新搭了博客网站并用了现在的主题。</li></ul><h3 id="爱情"><a href="#爱情" class="headerlink" title="爱情"></a>爱情</h3><ul><li>依旧单身，没什么想法！</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>算是普普通通的一年，回想起来也没发生什么大事。</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标:"></a>目标:</h3><ul><li>学习英语数学以及计算机基础课，决定考研。</li><li>撰写博客同步发布到个人网站方便总结和复习。</li><li>勤写博客，勤刷题，每天坚持记英语单词。</li><li>继续进行基础知识的学习和练习。</li><li>深入学习框架并尝试进行项目实战。</li><li>稳住急躁的情绪，稳扎稳打。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵学习1</title>
    <link href="/2019/12/31/%E7%9F%A9%E9%98%B5%E5%AD%A6%E4%B9%A01/"/>
    <url>/2019/12/31/%E7%9F%A9%E9%98%B5%E5%AD%A6%E4%B9%A01/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="矩阵定义"><a href="#矩阵定义" class="headerlink" title="矩阵定义"></a>矩阵定义</h2><p>向量是对数的拓展，一个向量表示一组数。<br>而矩阵是对向量的拓展，一个矩阵表示一组向量。<br>行数与列数相等的矩阵称为方阵。<br>一个矩阵可以拆分为n个行向量或者n个列向量，称矩阵为N x N矩阵。<br>矩阵可以表示成一个系统，例如在经济系统中，对于IT，电子，矿产，房产的投入，<br>可以表示成多个方程组，而方程组的系数则可用矩阵表示。</p><h2 id="矩阵的转置"><a href="#矩阵的转置" class="headerlink" title="矩阵的转置"></a>矩阵的转置</h2><p>行变成列，列变成行。</p><h3 id="矩阵转置的性质"><a href="#矩阵转置的性质" class="headerlink" title="矩阵转置的性质"></a>矩阵转置的性质</h3><p><img src="/2019/12/31/%E7%9F%A9%E9%98%B5%E5%AD%A6%E4%B9%A01/x1.png" srcset="/img/loading.gif" width="200px" height="80px"></p><h2 id="矩阵的运算"><a href="#矩阵的运算" class="headerlink" title="矩阵的运算"></a>矩阵的运算</h2><h3 id="矩阵的加法"><a href="#矩阵的加法" class="headerlink" title="矩阵的加法"></a>矩阵的加法</h3><p>每一个对应元素相加得到新矩阵</p><h3 id="矩阵的数量乘法"><a href="#矩阵的数量乘法" class="headerlink" title="矩阵的数量乘法"></a>矩阵的数量乘法</h3><p>标量去乘矩阵的每一个元素得到新矩阵</p><h3 id="矩阵的基本运算性质"><a href="#矩阵的基本运算性质" class="headerlink" title="矩阵的基本运算性质"></a>矩阵的基本运算性质</h3><p>A + B = B + A<br>(A + B) + C = A + (B + C)<br>存在矩阵O，满足：A + O = A<br>存在矩阵-A,满足：A + (-A) = O<br>-A 唯一, -A = -1 * A<br><img src="/2019/12/31/%E7%9F%A9%E9%98%B5%E5%AD%A6%E4%B9%A01/x2.png" srcset="/img/loading.gif" width="250px" height="70px"></p><h3 id="矩阵和向量的乘法"><a href="#矩阵和向量的乘法" class="headerlink" title="矩阵和向量的乘法"></a>矩阵和向量的乘法</h3><p>矩阵的列数必须和向量的元素个数一致。<br>矩阵与向量点乘，实际上将向量a转换成了向量b，所以矩阵可以理解为向量的函数。<br><img src="/2019/12/31/%E7%9F%A9%E9%98%B5%E5%AD%A6%E4%B9%A01/x3.png" srcset="/img/loading.gif" width="350px" height="100px"><br><img src="/2019/12/31/%E7%9F%A9%E9%98%B5%E5%AD%A6%E4%B9%A01/x4.png" srcset="/img/loading.gif" width="350px" height="100px"></p><h3 id="矩阵和矩阵的乘法"><a href="#矩阵和矩阵的乘法" class="headerlink" title="矩阵和矩阵的乘法"></a>矩阵和矩阵的乘法</h3><p>矩阵A和矩阵B的每一个列向量相乘，要求矩阵A的列数必须和矩阵B的行数一致。<br>矩阵的乘法不遵守交换律。<br><img src="/2019/12/31/%E7%9F%A9%E9%98%B5%E5%AD%A6%E4%B9%A01/x5.png" srcset="/img/loading.gif" width="350px" height="100px"><br><img src="/2019/12/31/%E7%9F%A9%E9%98%B5%E5%AD%A6%E4%B9%A01/x6.png" srcset="/img/loading.gif" width="350px" height="100px"></p><h3 id="矩阵的幂"><a href="#矩阵的幂" class="headerlink" title="矩阵的幂"></a>矩阵的幂</h3><p>只有方阵才有矩阵的幂。<br><img src="/2019/12/31/%E7%9F%A9%E9%98%B5%E5%AD%A6%E4%B9%A01/x7.png" srcset="/img/loading.gif" width="350px" height="100px"></p>]]></content>
    
    
    
    <tags>
      
      <tag>线性代数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线代个人理解</title>
    <link href="/2019/12/29/%E7%BA%BF%E4%BB%A3%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/"/>
    <url>/2019/12/29/%E7%BA%BF%E4%BB%A3%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>线性代数是从从研究一个数，到研究一组数的数学。<br>一组数的基本表示方法为向量，而向量也是线性代数研究的基本元素。<br>向量可以在多个维度表示一个Object的基本属性，方便我们数学的研究。<br>向量一般分为行向量与列向量，但在通常的教材和论文中，向量一般默认指列向量。<br>ps ： 由于印刷问题，列向量可以表示为(num1,num2)T。</p><h2 id="向量的运算"><a href="#向量的运算" class="headerlink" title="向量的运算"></a>向量的运算</h2><h3 id="向量的加法"><a href="#向量的加法" class="headerlink" title="向量的加法"></a>向量的加法</h3><p>如果两个向量(num1,num2) + (num3,num4),那么得到的结果为(num1+num3,num2+num4)。<br>向量的加法可以表示为在n维坐标中，继续增加n维度的单位。<br>例如(5,2)T + (2,5)T.<br>表示先在x维度上增加5个单位，在y维度上增加2个单位。再在x维度上增加2个单位，再在y维度上增加5个单位。那么在x维度总共有7个单位，在y维度总共也有7个单位，进而得到的向量的结果为(7,7).<br>它可以表示object在两个维度上的信息。</p><h3 id="向量的数量乘法"><a href="#向量的数量乘法" class="headerlink" title="向量的数量乘法"></a>向量的数量乘法</h3><p>简单来说乘法只是加法的推广和延申，那么向量的乘法同样也表示在n维度的坐标中，重复增加n维度个单位。</p><h3 id="向量运算的基本性质"><a href="#向量运算的基本性质" class="headerlink" title="向量运算的基本性质"></a>向量运算的基本性质</h3><p><img src="/2019/12/29/%E7%BA%BF%E4%BB%A3%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/xl.png" srcset="/img/loading.gif" width="350px" height="100px"></p><h3 id="向量的长度"><a href="#向量的长度" class="headerlink" title="向量的长度"></a>向量的长度</h3><p>二范数的概念：表示向量每个维度的平方相加再开二次方。例如勾股定理<br>那么向量的长度实际上就是求向量的二范数,也可以叫做求向量的模</p><h3 id="单位向量"><a href="#单位向量" class="headerlink" title="单位向量"></a>单位向量</h3><p>单位向量是指这个向量去乘这个向量的模分之一，也就是保持向量的长度为1.所以单位向量的模永远为1，它只表示方向。<br>根据向量u求出单位向量u1的过程，也被称为是归一化，规范化(normalize)。<br>二维空间中，有两个特殊的单位向量 e1 = (1,0),e2 = (0,1)。<br>只由0，1组成的单位向量叫做，标准为单位向量(Standard Unit Vector)。<br>n维空间有n个标准为单位向量。</p><h3 id="两个向量相乘"><a href="#两个向量相乘" class="headerlink" title="两个向量相乘"></a>两个向量相乘</h3><p><img src="/2019/12/29/%E7%BA%BF%E4%BB%A3%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/x2.png" srcset="/img/loading.gif" width="700px" height="150px"><br>两个向量相乘，结果为一个标量，这个标量代表两个向量的模相乘，再乘向量夹角的Cos值。这种乘法更严格的来说是两个向量的点乘，或者两个向量的内积。<br>向量的点乘也可以看作只有一行元素的矩阵与向量相乘。</p>]]></content>
    
    
    
    <tags>
      
      <tag>线性代数</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
