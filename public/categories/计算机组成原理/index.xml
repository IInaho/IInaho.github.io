<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机组成原理 on inaho</title>
    <link>//localhost:1313/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</link>
    <description>Recent content in 计算机组成原理 on inaho</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 12 Jun 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>I/O中断</title>
      <link>//localhost:1313/posts/fpbhduz70obegexnococdxzknse/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/fpbhduz70obegexnococdxzknse/</guid>
      <description>&lt;h1 id=&#34;io-中断&#34;&gt;&#xA;  I/O 中断&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#io-%e4%b8%ad%e6%96%ad&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h1 id=&#34;输入输出系统的发展概况&#34;&gt;&#xA;  输入输出系统的发展概况&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%be%93%e5%85%a5%e8%be%93%e5%87%ba%e7%b3%bb%e7%bb%9f%e7%9a%84%e5%8f%91%e5%b1%95%e6%a6%82%e5%86%b5&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;早期，外部设备与主机的连接采用&lt;strong&gt;分散连接&lt;/strong&gt;，每一个设备都有专用的控制电路，这些控制电路与 CPU 的控制电路设计在一起，紧耦合，增加和删除外部设备困难。CPU 与 IO 设备串行工作，主要使用程序查询方式。&lt;/li&gt;&#xA;&lt;li&gt;随着外部设备增多，分散连接不适用于外部设备与主机的连接，因此出现了 &lt;strong&gt;IO 接口与 DMA 控制器&lt;/strong&gt;，连接方式使用&lt;strong&gt;总线连接&lt;/strong&gt;，一个总线可以连接多个设备，CPU 与 IO 设备并行工作，出现了两种工作方式分为中断方式、DMA 方式。&lt;/li&gt;&#xA;&lt;li&gt;为了使输入输出系统的控制尽可能从主机中独立出来，出现了具有&lt;strong&gt;通道结构的阶段&lt;/strong&gt;，通道可以看做成小型的 DMA 控制器，通道有自己的指令系统。&lt;/li&gt;&#xA;&lt;li&gt;I/O 处理机阶段&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;输入输出系统的组成&#34;&gt;&#xA;  输入输出系统的组成&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%be%93%e5%85%a5%e8%be%93%e5%87%ba%e7%b3%bb%e7%bb%9f%e7%9a%84%e7%bb%84%e6%88%90&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;io-软件&#34;&gt;&#xA;  IO 软件&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#io-%e8%bd%af%e4%bb%b6&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;IO 软件的主要功能: 将用户编制的程序输入主机内，将运算结果输出给用户，实现输入/输出系统与主机工作的协调。&lt;/p&gt;&#xA;&lt;h3 id=&#34;io-指令&#34;&gt;&#xA;  IO 指令&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#io-%e6%8c%87%e4%bb%a4&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;IO 指令分为操作码、命令码和设备码三部分组成，操作码负责 IO 指令区别其他指令的判别代码，命令码负责 I/O 的具体操作，设备码用来判断对哪一个设备操作。&lt;/p&gt;&#xA;&lt;h3 id=&#34;通道指令&#34;&gt;&#xA;  通道指令&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e9%80%9a%e9%81%93%e6%8c%87%e4%bb%a4&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;通道指令又称为通道控制字，它是通道用于执行 IO 操作的指令，可以由管理程序存放在主存的任何地方，由通道从主存中取出并执行。通道程序由通道指令组成，它完成某种外部设备与主存间传送信息的操作。&lt;/p&gt;&#xA;&lt;h2 id=&#34;io-硬件&#34;&gt;&#xA;  IO 硬件&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#io-%e7%a1%ac%e4%bb%b6&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;输入/输出系统的硬件组成是多种多样的，在带接口的 I/O 系统中，I/O 硬件包括接口模块和 I/O 设备两大部分。在具有通道或 I/O 处理器的 I/O 系统中，I/O 硬件包括通道、设备控制器、IO 设备等。&lt;/p&gt;</description>
    </item>
    <item>
      <title>微程序设计</title>
      <link>//localhost:1313/posts/ojvpdu5xrowzx8xkt1actndhnig/</link>
      <pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/ojvpdu5xrowzx8xkt1actndhnig/</guid>
      <description>&lt;h1 id=&#34;微程序设计&#34;&gt;&#xA;  微程序设计&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%be%ae%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;微程序设计思想的产生&#34;&gt;&#xA;  微程序设计思想的产生&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%be%ae%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e6%80%9d%e6%83%b3%e7%9a%84%e4%ba%a7%e7%94%9f&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;使用组合逻辑设计的方式设计控制器，思路清晰、简单明了，但是电路庞杂，每个控制信号都需要单独的电路来完成控制信号的生成，如果要对指令集进行扩展，引入新的指令，其相关的微操作或者控制命令的逻辑电路都要进行修改。&lt;/p&gt;&#xA;&lt;p&gt;采用微程序设计的思想来实现控制器，设计和修改都比较容易，可以方便的进行指令集的扩展，这种思想由英国剑桥大学教授 Wilkes 提出，利用高低电平控制每个节拍发出的控制命令。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/YzrXbnneWoZZM5xKFercEFrpnVc.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;完成一条机器指令需要多个微操作命令，分在不同的节拍完成，如果在一个节拍内的多个微操作命令可以并行执行，可以将其组合起来构成一个微指令，这样一条机器指令可以由多个微指令完成，多个微指令就构成了一个微程序，微指令格式可以由二进制代码来表示，1/0 代表高低电平有效，如果一个节拍中要发送控制信号，可以由 0 或者 1 控制相应的部件生成信号，并且控制相应的微操作命令执行。&lt;/p&gt;&#xA;&lt;p&gt;一条机器指令对应一个微程序，每个微指令包含若干个控制信号，微指令的先后顺序就是微程序在设计上的先后顺序，将微指令存入 ROM，执行时将微指令逐条读出，根据微指令有效位数，发送信号。&lt;/p&gt;&#xA;&lt;h2 id=&#34;微程序控制单元框图及工作原理&#34;&gt;&#xA;  微程序控制单元框图及工作原理&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%be%ae%e7%a8%8b%e5%ba%8f%e6%8e%a7%e5%88%b6%e5%8d%95%e5%85%83%e6%a1%86%e5%9b%be%e5%8f%8a%e5%b7%a5%e4%bd%9c%e5%8e%9f%e7%90%86&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;机器指令对应的微程序&#34;&gt;&#xA;  机器指令对应的微程序&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%9c%ba%e5%99%a8%e6%8c%87%e4%bb%a4%e5%af%b9%e5%ba%94%e7%9a%84%e5%be%ae%e7%a8%8b%e5%ba%8f&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/PisobXd2co0hdzxJvpWcMuZ3nTe.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;取指周期有三个节拍，所以由三个微指令完成，每个节拍对应一条微指令，微指令完成每个节拍的微操作。&lt;/p&gt;&#xA;&lt;h3 id=&#34;微程序控制单元的基本框图&#34;&gt;&#xA;  微程序控制单元的基本框图&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%be%ae%e7%a8%8b%e5%ba%8f%e6%8e%a7%e5%88%b6%e5%8d%95%e5%85%83%e7%9a%84%e5%9f%ba%e6%9c%ac%e6%a1%86%e5%9b%be&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/K8iWb0sgzoPS8IxGNeCckjLynud.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;微程序、微指令都保存在控制存储器，取出微指令，需要知道微指令的地址，微指令的地址保存在一个寄存器中，也就是控制存储器地址寄存器(CMAR)，这个地址进行译码之后就可以送入控制存储器，控制存储器只读，读出来的微指令放入一个 CMDR(控制存储器数据寄存器)中，微地址形成部件需要接受 IR 中操作码部分送来的信号，微地址形成部件下面有一个顺序逻辑，顺序逻辑负责从 CMAR 中选择正确的来源(也就是多种”下地址”生成方式的来源)，将其送入 CMAR。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;微指令基本格式&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;操作控制，由 0 和 1 组成，每一个位置代表一个操作信号。&lt;/li&gt;&#xA;&lt;li&gt;顺序控制，给出下一条微指令的地址。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;微程序控制单元分析&#34;&gt;&#xA;  微程序控制单元分析&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%be%ae%e7%a8%8b%e5%ba%8f%e6%8e%a7%e5%88%b6%e5%8d%95%e5%85%83%e5%88%86%e6%9e%90&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/Cg6KbQs6KoKwvoxfJpTcgxNZnOb.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;每一条微指令右边存放下一条微指令的地址，假设该程序没有间址和中断周期，M-M+2 这三条指令将指令取出，至于取出的指令是什么指令，需要经过指令译码才能知道去执行周期执行哪一个微程序，这个过程由微地址形成部件来做的，微地址形成部件根据取来的这条指令的操作码，形成这条指令它在执行阶段所在的微程序在控制存储器中保存的位置，所以由 XXX 表示。&lt;/p&gt;&#xA;&lt;h3 id=&#34;微程序工作原理&#34;&gt;&#xA;  微程序工作原理&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%be%ae%e7%a8%8b%e5%ba%8f%e5%b7%a5%e4%bd%9c%e5%8e%9f%e7%90%86&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/GhiebvlkzoUtwQxgyescqydjnCg.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>组合逻辑设计</title>
      <link>//localhost:1313/posts/dicuduqpmouqhqxzqkhcfg6pncb/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/dicuduqpmouqhqxzqkhcfg6pncb/</guid>
      <description>&lt;h1 id=&#34;组合逻辑设计&#34;&gt;&#xA;  组合逻辑设计&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%bb%84%e5%90%88%e9%80%bb%e8%be%91%e8%ae%be%e8%ae%a1&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;组合逻辑控制单元框图&#34;&gt;&#xA;  组合逻辑控制单元框图&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%bb%84%e5%90%88%e9%80%bb%e8%be%91%e6%8e%a7%e5%88%b6%e5%8d%95%e5%85%83%e6%a1%86%e5%9b%be&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;cu-外特性&#34;&gt;&#xA;  CU 外特性&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#cu-%e5%a4%96%e7%89%b9%e6%80%a7&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/T2tVbISMBoNWPWxs3UpcjmdnnDb.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;CU 发出控制信号，信号之间有先后关系，节拍发生器产生的节拍作为 CU 的输入，节拍发生器外接入 CLK(机器主频)，产生多个节拍信号，每个节拍信号的起始端,CU 会产生命令，IR 的指令的操作码部分需要译码，n 位操作码可以译码出 &lt;code&gt;$2^n$&lt;/code&gt; 个结果。&lt;/p&gt;&#xA;&lt;h3 id=&#34;节拍信号&#34;&gt;&#xA;  节拍信号&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%8a%82%e6%8b%8d%e4%bf%a1%e5%8f%b7&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/LIcUbJD5xoyWD9xnWuXcpOHwnNh.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;微操作的节拍安排&#34;&gt;&#xA;  微操作的节拍安排&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%be%ae%e6%93%8d%e4%bd%9c%e7%9a%84%e8%8a%82%e6%8b%8d%e5%ae%89%e6%8e%92&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/TcpxbgnJmoEZ5DxYFsKctE55nZd.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;采用同步控制方式，也就是有一个统一的时钟信号来控制各个部件之间的交互，假设我们所设计一个机器周期内有三个节拍(时钟周期)，并且 CPU 内部结构采用非总线方式。&lt;/p&gt;&#xA;&lt;h3 id=&#34;安排微操作时许的原则&#34;&gt;&#xA;  安排微操作时许的原则&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%ae%89%e6%8e%92%e5%be%ae%e6%93%8d%e4%bd%9c%e6%97%b6%e8%ae%b8%e7%9a%84%e5%8e%9f%e5%88%99&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;微操作的先后顺序不得随意更改&lt;/li&gt;&#xA;&lt;li&gt;被控对象不同的微操作尽量安排在一个节拍内完成&lt;/li&gt;&#xA;&lt;li&gt;占用时间较短的微操作，尽量安排在一个节拍内完成，并允许有先后顺序&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;取指周期微操作的节拍安排&#34;&gt;&#xA;  取指周期微操作的节拍安排&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%8f%96%e6%8c%87%e5%91%a8%e6%9c%9f%e5%be%ae%e6%93%8d%e4%bd%9c%e7%9a%84%e8%8a%82%e6%8b%8d%e5%ae%89%e6%8e%92&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;$T_0$&lt;/code&gt;，不同的微操作可以安排在一个周期内完成&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PC-&amp;gt;MAR&lt;/li&gt;&#xA;&lt;li&gt;1-&amp;gt;R&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;$T_1$&lt;/code&gt;，同样按照原则二&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;M(MAR)-&amp;gt;MDR&lt;/li&gt;&#xA;&lt;li&gt;(PC)+1-&amp;gt;PC&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;code&gt;$T2$&lt;/code&gt;，两个微操作占用时间较短，一个微操作可在时钟周期的上升沿，一个在下降沿完成&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;MDR-&amp;gt;IR&lt;/li&gt;&#xA;&lt;li&gt;OP(IR)-&amp;gt;ID&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;间址周期微操作的节拍安排&#34;&gt;&#xA;  间址周期微操作的节拍安排&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e9%97%b4%e5%9d%80%e5%91%a8%e6%9c%9f%e5%be%ae%e6%93%8d%e4%bd%9c%e7%9a%84%e8%8a%82%e6%8b%8d%e5%ae%89%e6%8e%92&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;$T_0$&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ad(IR)-&amp;gt;MAR&lt;/li&gt;&#xA;&lt;li&gt;1-&amp;gt;R&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;$T_1$&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;M(MAR)-&amp;gt;MDR&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;$T_2$&lt;/code&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;MDR-&amp;gt;Ad(IR)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;执行周期微操作的节拍安排&#34;&gt;&#xA;  执行周期微操作的节拍安排&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%89%a7%e8%a1%8c%e5%91%a8%e6%9c%9f%e5%be%ae%e6%93%8d%e4%bd%9c%e7%9a%84%e8%8a%82%e6%8b%8d%e5%ae%89%e6%8e%92&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;CLA(对累加器进行清零)，&lt;code&gt;$T_2$&lt;/code&gt;: 0-&amp;gt;AC&lt;/p&gt;</description>
    </item>
    <item>
      <title>控制单元与微操作命令</title>
      <link>//localhost:1313/posts/wln3dzjjro0if1xzgjoc5hqin2b/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/wln3dzjjro0if1xzgjoc5hqin2b/</guid>
      <description>&lt;h1 id=&#34;微操作命令分析&#34;&gt;&#xA;  微操作命令分析&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%be%ae%e6%93%8d%e4%bd%9c%e5%91%bd%e4%bb%a4%e5%88%86%e6%9e%90&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;取指周期&#34;&gt;&#xA;  取指周期&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%8f%96%e6%8c%87%e5%91%a8%e6%9c%9f&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/Bd7tbCvSuoz1Gvx8l11caaD5npb.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PC-&amp;gt;MAR-&amp;gt; 地址线&lt;/li&gt;&#xA;&lt;li&gt;1-&amp;gt;R(读操作允许信号置为 1)&lt;/li&gt;&#xA;&lt;li&gt;M(MAR)-&amp;gt;MDR(M 表示 MAR 内的地址所在的内存单元的值)&lt;/li&gt;&#xA;&lt;li&gt;MDR-&amp;gt;IR&lt;/li&gt;&#xA;&lt;li&gt;OP(IR)-&amp;gt;CU,(OP 代表 IR 中保存的命令的操作码)&lt;/li&gt;&#xA;&lt;li&gt;(PC)+1-&amp;gt;PC,(括号加 PC，代表取 PC 的值)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;指令的地址保存在 PC 中，PC 将地址送入 MAR 经过地址总线送入存储器中，然后 CU 向存储器发出读信号，该信号经过控制总线送入存储器中，读出的数据从由存储器送给 MDR，再由 MDR 送入 IR，指令就被取出到 IR 当中。&lt;/p&gt;&#xA;&lt;p&gt;在取指周期其实还要完成译码的任务，译码要确定指令要做什么操作，这个操作由指令的操作码给出，所以要将指令的操作码部分送给 CU，然后再由 CU 译码确定指令的操作。取指周期还要对 PC 进行更新，所以 PC 的值要 +1，把结果再保存进 PC 当中。&lt;/p&gt;&#xA;&lt;h2 id=&#34;间址周期&#34;&gt;&#xA;  间址周期&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e9%97%b4%e5%9d%80%e5%91%a8%e6%9c%9f&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/Jiqjbi9NDosOq3xwMRvcPhO2nEg.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;指令形式地址-&amp;gt;MAR&lt;/li&gt;&#xA;&lt;li&gt;Ad(IR)-&amp;gt;MAR&lt;/li&gt;&#xA;&lt;li&gt;1-&amp;gt;R(发出读信号)&lt;/li&gt;&#xA;&lt;li&gt;M(MAR)-&amp;gt;MDR(MAR 保存的地址所在内存单元中的数据 M 送入 MDR)&lt;/li&gt;&#xA;&lt;li&gt;MDR-&amp;gt;Ad(IR)(真实地址送入 IR)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;间址周期说明指令采用的是间接寻址，我们要通过间址周期把操作数的地址，从存储器当中取出，放入 IR 当中所保存的指令的地址码部分。&lt;/p&gt;</description>
    </item>
    <item>
      <title>指令流水与中断系统</title>
      <link>//localhost:1313/posts/dkcqd7kpvovrotxo5glcj0wfnwd/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/dkcqd7kpvovrotxo5glcj0wfnwd/</guid>
      <description>&lt;h1 id=&#34;指令流水&#34;&gt;&#xA;  指令流水&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%8c%87%e4%bb%a4%e6%b5%81%e6%b0%b4&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;如何提高机器速度&#34;&gt;&#xA;  如何提高机器速度&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%a6%82%e4%bd%95%e6%8f%90%e9%ab%98%e6%9c%ba%e5%99%a8%e9%80%9f%e5%ba%a6&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;提高访存速度&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;高速存储芯片&lt;/li&gt;&#xA;&lt;li&gt;高速 Cachhe&lt;/li&gt;&#xA;&lt;li&gt;多体并行结构&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;提高 I/O 和主机之间的传送速度&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;中断&lt;/li&gt;&#xA;&lt;li&gt;DMA&lt;/li&gt;&#xA;&lt;li&gt;通道&lt;/li&gt;&#xA;&lt;li&gt;I/O 处理机&lt;/li&gt;&#xA;&lt;li&gt;多总线结构&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;提高运算器速度&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;高速芯片&lt;/li&gt;&#xA;&lt;li&gt;改进算法&lt;/li&gt;&#xA;&lt;li&gt;快速进位链&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;提高整机处理能力&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;高速器件&lt;/li&gt;&#xA;&lt;li&gt;改进系统结构，开发系统的并行性&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;系统的并行性&#34;&gt;&#xA;  系统的并行性&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%b3%bb%e7%bb%9f%e7%9a%84%e5%b9%b6%e8%a1%8c%e6%80%a7&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;并行的概念&#34;&gt;&#xA;  并行的概念&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%b9%b6%e8%a1%8c%e7%9a%84%e6%a6%82%e5%bf%b5&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;并发，两个或两个以上事件在同一时间段发生&lt;/li&gt;&#xA;&lt;li&gt;同时，两个或两个以上事件在同一时刻发生&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;并行性的等级&#34;&gt;&#xA;  并行性的等级&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%b9%b6%e8%a1%8c%e6%80%a7%e7%9a%84%e7%ad%89%e7%ba%a7&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;过程级(程序、进程)，粗粒度，软件实现。&lt;/li&gt;&#xA;&lt;li&gt;指令级(指令之间，指令内部)，细粒度，硬件实现。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;指令流水的原理&#34;&gt;&#xA;  指令流水的原理&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%8c%87%e4%bb%a4%e6%b5%81%e6%b0%b4%e7%9a%84%e5%8e%9f%e7%90%86&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;指令的串行执行&#34;&gt;&#xA;  指令的串行执行&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%8c%87%e4%bb%a4%e7%9a%84%e4%b8%b2%e8%a1%8c%e6%89%a7%e8%a1%8c&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/Zey7bxJy1ozQFGxqxPKc3GbIndg.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;一条指令的执行需要经过三个阶段，取指令、译码、执行，每个阶段都需要花费一个时钟周期，如果没有采用流水线技术，那么执行 N 条这样的指令就需要 3N 个时钟周期，假设取指令用取指令部件完成，执行指令用执行指令部件完成，那么总有一个部件空闲，如图所示。&lt;/p&gt;&#xA;&lt;h3 id=&#34;指令的二级流水&#34;&gt;&#xA;  指令的二级流水&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%8c%87%e4%bb%a4%e7%9a%84%e4%ba%8c%e7%ba%a7%e6%b5%81%e6%b0%b4&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/PGGhbyliSoxLeex4623cYGXinig.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>中央处理器</title>
      <link>//localhost:1313/posts/mlzadxsogolrg2xkqrfcjfr6n4g/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/mlzadxsogolrg2xkqrfcjfr6n4g/</guid>
      <description>&lt;h1 id=&#34;cpu-概述&#34;&gt;&#xA;  CPU 概述&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#cpu-%e6%a6%82%e8%bf%b0&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;cpu-的功能&#34;&gt;&#xA;  CPU 的功能&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#cpu-%e7%9a%84%e5%8a%9f%e8%83%bd&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;CPU=运算器 + 控制器，运算器部分主要对数据进行加工，控制器负责协调并控制计算机各部件执行程序的指令序列，包括取指令、分析指令和执行指令。&lt;/p&gt;&#xA;&lt;p&gt;控制器还必须能控制程序的输入和运算结果的输出，以及对总线的管理，处理机器的异常情况和特殊请求，即处理中断的能力。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;控制器能自动形成指令地址，发出取指令的命令，将对应地址指令取出，称为指令控制&lt;/li&gt;&#xA;&lt;li&gt;取指令后，完成每条指令所需的控制命令，称为操作控制&lt;/li&gt;&#xA;&lt;li&gt;控制命令产生后，对各种控制命令加以时间的控制，称为时间控制&lt;/li&gt;&#xA;&lt;li&gt;执行过程中，需要进行算术运算和逻辑运算，称为数据加工&lt;/li&gt;&#xA;&lt;li&gt;处理特殊请求，需要处理中断的能力，称为中断处理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;cpu-与系统总线&#34;&gt;&#xA;  CPU 与系统总线&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#cpu-%e4%b8%8e%e7%b3%bb%e7%bb%9f%e6%80%bb%e7%ba%bf&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;指令控制，PC、IR&lt;/li&gt;&#xA;&lt;li&gt;操作控制和时间控制，CU 时序电路&lt;/li&gt;&#xA;&lt;li&gt;数据加工，ALU 寄存器&lt;/li&gt;&#xA;&lt;li&gt;处理中断，中断系统&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/DCDjbiXnAoPgewxkAJCc0CqLnKc.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;cpu-的寄存器&#34;&gt;&#xA;  CPU 的寄存器&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#cpu-%e7%9a%84%e5%af%84%e5%ad%98%e5%99%a8&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;用户可见寄存器&#34;&gt;&#xA;  用户可见寄存器&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%94%a8%e6%88%b7%e5%8f%af%e8%a7%81%e5%af%84%e5%ad%98%e5%99%a8&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通用寄存器，存放操作数，可作某种寻址方式所需的专业寄存器&lt;/li&gt;&#xA;&lt;li&gt;数据寄存器，存放操作数，两个寄存器拼接存放双倍字长数据&lt;/li&gt;&#xA;&lt;li&gt;地址寄存器，存放地址，其位数应满足最大地址范围，用于特殊的寻址方式，段基址，栈指针&lt;/li&gt;&#xA;&lt;li&gt;条件码寄存器，也叫程序状态字寄存器，存放由算术指令和逻辑指令运行或测试的条件码，如运算结果进位标志、运算结果溢出标志等，可做程序分支的依据，如正、负、零、溢出、进位等&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;控制器中的寄存器&#34;&gt;&#xA;  控制器中的寄存器&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%8e%a7%e5%88%b6%e5%99%a8%e4%b8%ad%e7%9a%84%e5%af%84%e5%ad%98%e5%99%a8&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序计数器 PC，确定下一条指令的地址，对用户可见&lt;/li&gt;&#xA;&lt;li&gt;指令寄存器 IR，保存当前正在执行的指令，用户不可见&lt;/li&gt;&#xA;&lt;li&gt;存储器数据寄存器 MDR，暂时存放由主存读出的一条指令或数据字，用户不可见&lt;/li&gt;&#xA;&lt;li&gt;存储器地址寄存器 MAR，保存当前 CPU 所访问的内存单元的地址，用户不可见&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;指令周期&#34;&gt;&#xA;  指令周期&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%8c%87%e4%bb%a4%e5%91%a8%e6%9c%9f&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;指令周期的概念&#34;&gt;&#xA;  指令周期的概念&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%8c%87%e4%bb%a4%e5%91%a8%e6%9c%9f%e7%9a%84%e6%a6%82%e5%bf%b5&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;CPU 取出并执行一条指令所需的全部时间，即 CPU 完成一条指令的时间，称为指令周期。指令周期被划分为几个不同阶段，每个阶段所需时间称为机器周期、CPU 工作周期或基本周期，通常等于取指时间或访存时间，时钟周期是时钟频率的倒数，也称为节拍脉冲或 T 周期。&lt;/p&gt;</description>
    </item>
    <item>
      <title>寻址方式与RISC技术</title>
      <link>//localhost:1313/posts/u6dndsgjyoumqsxux88cqgzbnzd/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/u6dndsgjyoumqsxux88cqgzbnzd/</guid>
      <description>&lt;h1 id=&#34;寻址方式与-risc-技术&#34;&gt;&#xA;  寻址方式与 RISC 技术&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%af%bb%e5%9d%80%e6%96%b9%e5%bc%8f%e4%b8%8e-risc-%e6%8a%80%e6%9c%af&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h1 id=&#34;寻址方式&#34;&gt;&#xA;  寻址方式&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%af%bb%e5%9d%80%e6%96%b9%e5%bc%8f&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;寻址方式确定本条指令的操作数地址，或者下一条要执行指令的指令地址，指令的地址码字段往往不是操作数真实的地址，而是形式地址，用 A 表示。形式地址结合指令的寻址方式可以计算出操作数的真实地址，称为有效地址用 EA 表示。&lt;/p&gt;&#xA;&lt;p&gt;(PC)表示寄存器 PC 的数值，不加括号表示存储介质或编码。&lt;/p&gt;&#xA;&lt;p&gt;寻址方式分为指令寻址和数据寻址。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;确定指令存放位置的过程称为指令寻址方式&lt;/li&gt;&#xA;&lt;li&gt;确定操作数存放位置的过程称为数据寻址方式&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;指令寻址&#34;&gt;&#xA;  指令寻址&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%8c%87%e4%bb%a4%e5%af%bb%e5%9d%80&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;找到下一条将要执行指令的地址，称为指令寻址，指令基本上按执行顺序存放在主存中，执行过程中，指令总是从内存单元被取到指令寄存器 IR 中。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;顺序寻址，(PC)+1-&amp;gt;PC&lt;/li&gt;&#xA;&lt;li&gt;跳跃寻址，由转移指令指出&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/I88UbZLBOoIfsIxymkecrr5Sn4c.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;数据寻址&#34;&gt;&#xA;  数据寻址&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%95%b0%e6%8d%ae%e5%af%bb%e5%9d%80&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;找到当前正在执行指令的数据地址，称为数据寻址。起始数据被存放在内存中，在指令执行的过程中，内存的数据可能被装入其他地方，所以数据的寻址涉及寄存器、内存单元、堆栈、I\O 端口、立即数的访问。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/NqfbbUeA0o6at8xlNKucuan6nBb.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;形式地址：指令字中的地址&lt;/p&gt;&#xA;&lt;p&gt;有效地址：操作数的真实地址&lt;/p&gt;&#xA;&lt;p&gt;约定 指令字长=存储子长=机器字长&lt;/p&gt;&#xA;&lt;h3 id=&#34;立即寻址&#34;&gt;&#xA;  立即寻址&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%ab%8b%e5%8d%b3%e5%af%bb%e5%9d%80&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;这个寻址方式直接给出操作数，不需要给出地址去其他地方找操作数。&lt;/p&gt;&#xA;&lt;p&gt;优点：只需要取出指令，便可立即获得操作数，采用立即寻址特征的指令只需要取指令时访问存储器，而在执行阶段不必再访问存储器。&lt;/p&gt;&#xA;&lt;p&gt;缺点：由于 A 表示的就是立即数 ，因此 A 的位数限制了立即数表示的范围，例如，A 占 8 位，则立即数的表示范围为-128-127，因为立即数都是补码表示的。&lt;/p&gt;&#xA;&lt;p&gt;立即寻址方式通常用于对某寄存器或内存单元赋初值。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/BefZbO3KKoDX9qxIf1Qcas0onYg.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;形式地址 A 就是操作数&lt;/li&gt;&#xA;&lt;li&gt;指令执行阶段不访存&lt;/li&gt;&#xA;&lt;li&gt;A 的位数限制了立即数的范围&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;直接寻址&#34;&gt;&#xA;  直接寻址&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%9b%b4%e6%8e%a5%e5%af%bb%e5%9d%80&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;通过直接寻址给出的地址取到操作数，然后再将操作数送往运算器或其他地方。&lt;/p&gt;</description>
    </item>
    <item>
      <title>机器指令与操作数</title>
      <link>//localhost:1313/posts/umwcdabgjooxqwxyixncbd21nvc/</link>
      <pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/umwcdabgjooxqwxyixncbd21nvc/</guid>
      <description>&lt;h1 id=&#34;机器指令&#34;&gt;&#xA;  机器指令&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%9c%ba%e5%99%a8%e6%8c%87%e4%bb%a4&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;机器指令的定义&#34;&gt;&#xA;  机器指令的定义&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%9c%ba%e5%99%a8%e6%8c%87%e4%bb%a4%e7%9a%84%e5%ae%9a%e4%b9%89&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;计算机唯一能识别的语言是机器语言，而机器语言是由一条条语句构成，人们习惯把构成机器语言的这些语句称为机器指令，全部机器指令的集合又称为机器的指令系统。&lt;/p&gt;&#xA;&lt;h2 id=&#34;机器指令的格式&#34;&gt;&#xA;  机器指令的格式&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%9c%ba%e5%99%a8%e6%8c%87%e4%bb%a4%e7%9a%84%e6%a0%bc%e5%bc%8f&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;一条指令由操作码和地址码组成，指令的字长分为固定字长和可变字长。&lt;/p&gt;&#xA;&lt;h3 id=&#34;操作码&#34;&gt;&#xA;  操作码&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%93%8d%e4%bd%9c%e7%a0%81&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/AFmxbdq0AoQqDNxh7tHcB8Z8nMg.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;长度固定，用于指令字长较长的情况，RISC。如 IBM370，操作码 8 位&lt;/li&gt;&#xA;&lt;li&gt;长度可变，操作码分散在指令字的不同字段中，不允许较短操作码是较长操作码的前缀，各条指令操作码不能重复。&lt;/li&gt;&#xA;&lt;li&gt;扩展操作码技术，操作码的位数随地址数的减少而增加&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/DK1qbWc7Fo2XpUxWULEcHrqgn7t.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;三地址指令操作码，每减少一种最多可构成 &lt;code&gt;$2^4$&lt;/code&gt; 种二地址指令&#xA;二地址指令操作码，每减少一种最多可多构成 &lt;code&gt;$2^4$&lt;/code&gt; 种一地址指令&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;地址码&#34;&gt;&#xA;  地址码&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%9c%b0%e5%9d%80%e7%a0%81&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;地址码也被称为操作数字段，地址码的作用：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;需要指出操作数的地址，即用哪里的数来操作。&lt;/li&gt;&#xA;&lt;li&gt;需要指出操作后的结果放在哪里，即给出结果存放的地址。&lt;/li&gt;&#xA;&lt;li&gt;需要指出该条指令执行结束后怎么办，即需要指出下一条指令的地址。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;四地址&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/YfhgbYvLpoINnLxMR6McSKYdn2f.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;A4 用于存放下一条将要执行指令的地址，若指令字长 32 位，操作码 8 位，四个地址码字段各 6 位，直接寻址范围 &lt;code&gt;$2^6=64$&lt;/code&gt;,访存 4 次&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;三地址&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/VwowbIJxko0aCLxwHEZcU65andc.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;A1 与 A2 进行 OP 后，结果保存在 A3 中，假设指令字长 32 位，操作码 8 位，地址码各 8 位，寻址范围 &lt;code&gt;$2^8=256$&lt;/code&gt;，若地址字段均为主存地址，需要四次访存。&lt;/p&gt;</description>
    </item>
    <item>
      <title>浮点四则与算术逻辑单元</title>
      <link>//localhost:1313/posts/lt4tdvdtao1ocnxwxv3cqfirncb/</link>
      <pubDate>Wed, 13 May 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/lt4tdvdtao1ocnxwxv3cqfirncb/</guid>
      <description>&lt;h1 id=&#34;浮点四则与算术逻辑单元&#34;&gt;&#xA;  浮点四则与算术逻辑单元&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%b5%ae%e7%82%b9%e5%9b%9b%e5%88%99%e4%b8%8e%e7%ae%97%e6%9c%af%e9%80%bb%e8%be%91%e5%8d%95%e5%85%83&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;浮点加减运算&#34;&gt;&#xA;  浮点加减运算&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%b5%ae%e7%82%b9%e5%8a%a0%e5%87%8f%e8%bf%90%e7%ae%97&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;$$ x = S_x \times 2^t, \quad y = S_y \times 2^t $$&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;对阶&#34;&gt;&#xA;  对阶&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%af%b9%e9%98%b6&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;求阶差&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/GmirbSPeFogXe0x8GBhcTnPBnzc.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;对阶就是判断两个浮点数的值是否相同，如果两数的阶码相同，直接可以加数值部分，即可完成相加，如果阶码不同，则需要对其进行对阶。&lt;/li&gt;&#xA;&lt;li&gt;对阶原则，小阶向大阶看齐&#xA;如果大阶向小阶看齐，需要对其进行左移，容易将高位的 1 丢失，引发错误。而小阶向大阶看齐，需要对其进行右移，只会影响数据的精度，不会影响具体的数据大小&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;例如：&lt;code&gt;$x=0.1101×2^{01},y=(−0.1010)×2^{11}$&lt;/code&gt;,求&lt;code&gt;$x+y$&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;对阶&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;i. 求阶差：&lt;code&gt;$[\Delta I]_{i\frac{1}{2}} = [I_s]_{i\frac{1}{2}}^k - [I_s]_{i\frac{1}{2}}^{k-1} = 00.01 - 11.10 = -2$&lt;/code&gt;，&lt;code&gt;$f_x + 2$&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;ii. 对阶后 &lt;code&gt;$[x]_{i\frac{1}{2}} = 00.11;00.0011$&lt;/code&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;尾数求和：&lt;code&gt;$[S_x]_{i\frac{1}{2}} + [S_y]_{i\frac{1}{2}} = 00.0011 + 11.0110 = 11.1001$&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;所以 &lt;code&gt;$[x+y]_{i\frac{1}{2}} = 00.11;11.1001$&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cache与辅助存储器</title>
      <link>//localhost:1313/posts/i6g4dgvsoov5saxkhxlc2fnfngc/</link>
      <pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/i6g4dgvsoov5saxkhxlc2fnfngc/</guid>
      <description>&lt;h1 id=&#34;cache-与辅助存储器&#34;&gt;&#xA;  Cache 与辅助存储器&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#cache-%e4%b8%8e%e8%be%85%e5%8a%a9%e5%ad%98%e5%82%a8%e5%99%a8&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;cache-概述&#34;&gt;&#xA;  Cache 概述&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#cache-%e6%a6%82%e8%bf%b0&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;为什么使用-cache&#34;&gt;&#xA;  为什么使用 Cache？&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88%e4%bd%bf%e7%94%a8-cache&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;避免 CPU”空等”现象&lt;/li&gt;&#xA;&lt;li&gt;CPU 和主存(DRAM)的速度差异&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/Yow0bceGZoSJYxx9UfYcNLG0nUf.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;程序访问的局部性原理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;cache-的工作原理&#34;&gt;&#xA;  Cache 的工作原理&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#cache-%e7%9a%84%e5%b7%a5%e4%bd%9c%e5%8e%9f%e7%90%86&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;主存和缓存的编址&#34;&gt;&#xA;  主存和缓存的编址&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%b8%bb%e5%ad%98%e5%92%8c%e7%bc%93%e5%ad%98%e7%9a%84%e7%bc%96%e5%9d%80&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/Jz7DbWSVDoxqU0xG8xlcnaUFnmF.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;主存和缓存按块存储，块的大小相同，B 为块长。缓存的块远远小于主存的块，如果主存要和 Cache 映射，那么至少要保证主存中每块大小应与 Cache 中每块大小相同。&lt;/p&gt;&#xA;&lt;p&gt;每个字块包含 N 个字，主存的地址应该分成两部分，一部分用来寻找某个字块，另一部分用来寻找该字块中的字或字节。&lt;/p&gt;&#xA;&lt;h3 id=&#34;命中与未命中&#34;&gt;&#xA;  命中与未命中&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%91%bd%e4%b8%ad%e4%b8%8e%e6%9c%aa%e5%91%bd%e4%b8%ad&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;缓存共有 C 块，主存共有 M 块，M&amp;raquo;C.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;命中: 主存块调入缓存，主存块与缓存块 建立了对应关系。&lt;/li&gt;&#xA;&lt;li&gt;未命中: 主存块未调入缓存，主存块与缓存块未建立对应关系。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;用标记记录与某缓存块建立了对应关系的主存块号。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h4 id=&#34;cache-的命中率&#34;&gt;&#xA;  Cache 的命中率&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#cache-%e7%9a%84%e5%91%bd%e4%b8%ad%e7%8e%87&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;CPU 欲访问的信息在 Cache 中的比率，命中率与 Cache 的容量与块长有关，一般每块可取 4-8 个字。&lt;/p&gt;</description>
    </item>
    <item>
      <title>主存储器之ROM</title>
      <link>//localhost:1313/posts/b7t1dykuqopbs2xic6zcoqkynse/</link>
      <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/b7t1dykuqopbs2xic6zcoqkynse/</guid>
      <description>&lt;h1 id=&#34;主存储器之-rom&#34;&gt;&#xA;  主存储器之 ROM&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%b8%bb%e5%ad%98%e5%82%a8%e5%99%a8%e4%b9%8b-rom&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;只读存储器&#34;&gt;&#xA;  只读存储器&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%8f%aa%e8%af%bb%e5%ad%98%e5%82%a8%e5%99%a8&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;早期的只读存储器—在厂家就写好了内容&lt;/li&gt;&#xA;&lt;li&gt;改进 1—用户可以自己写—一次性&lt;/li&gt;&#xA;&lt;li&gt;改进 2—可以多次写—要能对信息进行擦除&lt;/li&gt;&#xA;&lt;li&gt;改进 3—电可擦写—特定设备&lt;/li&gt;&#xA;&lt;li&gt;改进 4—电可擦写—直接连接到计算机上&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;掩膜-rommrom&#34;&gt;&#xA;  掩膜 ROM(MROM)&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%8e%a9%e8%86%9c-rommrom&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;MROM 有芯片制造商在制造时写入内容，之后只能读不能写入，其基本存储原理是以元件的”有/无”来表示该存储单元的信息(“1”或”0”)。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;行列选择线交叉处有 MOS 管为”1”&lt;/li&gt;&#xA;&lt;li&gt;行列选择线交叉处无 MOS 管为”0”&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;prom一次性编程&#34;&gt;&#xA;  PROM(一次性编程)&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#prom%e4%b8%80%e6%ac%a1%e6%80%a7%e7%bc%96%e7%a8%8b&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用熔丝存储数据，用户可根据自己的需要来对其填入内容，属于一次性写入的存储器。部分 PROM 在出厂时数据全为 0，用户可以将其中的部分单元写入 1，以实现对其”编程”的目的。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/LgOebfjaUoz8SCxOjw2cQ2LGnBf.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;eprom多次编程&#34;&gt;&#xA;  EPROM(多次编程)&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#eprom%e5%a4%9a%e6%ac%a1%e7%bc%96%e7%a8%8b&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;使用悬浮栅存储数据，为了能多次修改 ROM 的内容，产生了 EPROM，EPRM 使用高压写入数据，当需要修改时，可使用紫外线将其全部内容擦除(不能局部擦除)。但是使用紫外线并不方便，因此产生了 EEPROM.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/FkiobUR21o7VRsx3aoacbg0ynqc.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;D 端加正电压，形成浮动栅，S 与 D 不导通为”0”&lt;/li&gt;&#xA;&lt;li&gt;D 端不加正电压，不形成浮动栅，S 与 D 导通为”1”&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;eeprom多次性编程&#34;&gt;&#xA;  EEPROM(多次性编程)&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#eeprom%e5%a4%9a%e6%ac%a1%e6%80%a7%e7%bc%96%e7%a8%8b&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;EEPROM 与 EPROM 运作原理一样，不但写入数据使用高压，擦除数据也是用了高压。&lt;/p&gt;</description>
    </item>
    <item>
      <title>存储器概述与RAM</title>
      <link>//localhost:1313/posts/hwwkdktvtogtnpxqsytcnksunme/</link>
      <pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/hwwkdktvtogtnpxqsytcnksunme/</guid>
      <description>&lt;h1 id=&#34;存储器概述&#34;&gt;&#xA;  存储器概述&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%ad%98%e5%82%a8%e5%99%a8%e6%a6%82%e8%bf%b0&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;存储器分类&#34;&gt;&#xA;  存储器分类&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%ad%98%e5%82%a8%e5%99%a8%e5%88%86%e7%b1%bb&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;按存储介质分类&#34;&gt;&#xA;  按存储介质分类&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%8c%89%e5%ad%98%e5%82%a8%e4%bb%8b%e8%b4%a8%e5%88%86%e7%b1%bb&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;半导体存储器 TTL(集成度低，功耗高，速度快)、MOS(集成度高，功耗低)—易失&lt;/li&gt;&#xA;&lt;li&gt;磁表面存储器 （磁头、磁载体）&lt;/li&gt;&#xA;&lt;li&gt;磁芯存储器 硬磁材料、环状元件&lt;/li&gt;&#xA;&lt;li&gt;光盘存储器 激光、磁光材料&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;按存取方式分类&#34;&gt;&#xA;  按存取方式分类&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%8c%89%e5%ad%98%e5%8f%96%e6%96%b9%e5%bc%8f%e5%88%86%e7%b1%bb&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;存取时间与物理地址无关(随机访问)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;随机存储器 在程序的执行过程中可读可写&lt;/li&gt;&#xA;&lt;li&gt;只读存储器 在程序的执行过程中只读&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;存取时间与物理地址有关(串行访问)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;顺序存取存储器 磁带&lt;/li&gt;&#xA;&lt;li&gt;直接存取存储器 磁盘&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;按在计算机中的作用分类&#34;&gt;&#xA;  按在计算机中的作用分类&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%8c%89%e5%9c%a8%e8%ae%a1%e7%ae%97%e6%9c%ba%e4%b8%ad%e7%9a%84%e4%bd%9c%e7%94%a8%e5%88%86%e7%b1%bb&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;主存储器&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;RAM&#xA;&lt;ul&gt;&#xA;&lt;li&gt;静态 RAM&lt;/li&gt;&#xA;&lt;li&gt;动态 RAM&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;ROM&#xA;&lt;ul&gt;&#xA;&lt;li&gt;MROM&lt;/li&gt;&#xA;&lt;li&gt;PROM&lt;/li&gt;&#xA;&lt;li&gt;EPROM&lt;/li&gt;&#xA;&lt;li&gt;EEPROM&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Flash Memory&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;高速缓冲存储器(Cache)&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;辅助存储器 磁盘、磁带、光盘&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;存储器的层次结构&#34;&gt;&#xA;  存储器的层次结构&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%ad%98%e5%82%a8%e5%99%a8%e7%9a%84%e5%b1%82%e6%ac%a1%e7%bb%93%e6%9e%84&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;存储器三个主要特性的关系&#34;&gt;&#xA;  存储器三个主要特性的关系&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%ad%98%e5%82%a8%e5%99%a8%e4%b8%89%e4%b8%aa%e4%b8%bb%e8%a6%81%e7%89%b9%e6%80%a7%e7%9a%84%e5%85%b3%e7%b3%bb&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/PEz4bLcbMoYYUaxYpcxcz6aSnEg.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>定点运算</title>
      <link>//localhost:1313/posts/sdr3dcex0opknmx2d85cnsbanke/</link>
      <pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/sdr3dcex0opknmx2d85cnsbanke/</guid>
      <description>&lt;h1 id=&#34;定点运算&#34;&gt;&#xA;  定点运算&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%ae%9a%e7%82%b9%e8%bf%90%e7%ae%97&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;移位运算&#34;&gt;&#xA;  移位运算&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%a7%bb%e4%bd%8d%e8%bf%90%e7%ae%97&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;移位的意义&#34;&gt;&#xA;  移位的意义&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%a7%bb%e4%bd%8d%e7%9a%84%e6%84%8f%e4%b9%89&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;在日常计算中将 15.0 小数点右移 2 位为 1500.0，计算机中小数点位置固定不变。所以需要将数据相对小数点进行移位。&lt;/p&gt;&#xA;&lt;p&gt;在计算机中，移位与加减配合，能够实现乘除运算。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;左移，绝对值扩大&lt;/li&gt;&#xA;&lt;li&gt;右移，绝对值缩小&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;算术移位规则&#34;&gt;&#xA;  算术移位规则&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%ae%97%e6%9c%af%e7%a7%bb%e4%bd%8d%e8%a7%84%e5%88%99&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;正数：原码、补码、反码添补代码都为 0&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;负数：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;原码，添补代码为 0&lt;/li&gt;&#xA;&lt;li&gt;补码，左移添 0，右移添 1&lt;/li&gt;&#xA;&lt;li&gt;反码，添补代码为 1&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;符号位不变&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h3 id=&#34;算术移位举例&#34;&gt;&#xA;  算术移位举例&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%ae%97%e6%9c%af%e7%a7%bb%e4%bd%8d%e4%b8%be%e4%be%8b&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;设机器数字长为 8 位(含 1 位符号位)，写出 A=+26 时，三种机器数左、右移移位和两位后的表示形式及对应的真值，并分析结果的正确性。&#xA;解： A=+26=+11010，则 A 的原码、补码、反码=0，0011010.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/YwZAbq7TOo2lWBxJiEMcRLtZn6c.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;设机器数字长为 8 位(含 1 位符号位)，写出 A=-26 时，三种机器数左右移一位和两位后的表示形式及对应的真值，并分析结果的正确性。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;解： A=-26=-11010&lt;/p&gt;&#xA;&lt;p&gt;原码表示：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/YHaIb3BLlopmH5xRbJkcGEivnXe.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;补码表示：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/LxS7bJ1UUoHCWwxdKhpcBOtbnve.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>计算机运算方法</title>
      <link>//localhost:1313/posts/bu5edaojhohwigx6erucztlpngf/</link>
      <pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/bu5edaojhohwigx6erucztlpngf/</guid>
      <description>&lt;h1 id=&#34;计算机的运算方法&#34;&gt;&#xA;  计算机的运算方法&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%9a%84%e8%bf%90%e7%ae%97%e6%96%b9%e6%b3%95&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;无符号数和有符号数&#34;&gt;&#xA;  无符号数和有符号数&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%97%a0%e7%ac%a6%e5%8f%b7%e6%95%b0%e5%92%8c%e6%9c%89%e7%ac%a6%e5%8f%b7%e6%95%b0&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;无符号数&#34;&gt;&#xA;  无符号数&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%97%a0%e7%ac%a6%e5%8f%b7%e6%95%b0&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;寄存器的位数反映无符号数的表示范围。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/F5NabEP2Ao9Nvex2ZN6c2uvnnpf.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;有符号数&#34;&gt;&#xA;  有符号数&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%9c%89%e7%ac%a6%e5%8f%b7%e6%95%b0&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;机器数与真值&#34;&gt;&#xA;  机器数与真值&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%9c%ba%e5%99%a8%e6%95%b0%e4%b8%8e%e7%9c%9f%e5%80%bc&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/MPwsbOOfuo1MjzxHMvwcCVlfnkc.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;原码表示法&#34;&gt;&#xA;  原码表示法&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%8e%9f%e7%a0%81%e8%a1%a8%e7%a4%ba%e6%b3%95&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;整数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/CiR9b31zUoviAJxCGalcbDOZn9B.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;小数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/CxnnbZFXCo2TVmxxXFLcoTs1nXg.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;举例&#34;&gt;&#xA;  举例&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%b8%be%e4%be%8b&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/Jlubbih8uoUjkhxGnVtcxhqtnjP.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;补码表示法&#34;&gt;&#xA;  补码表示法&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%a1%a5%e7%a0%81%e8%a1%a8%e7%a4%ba%e6%b3%95&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;补的概念&#34;&gt;&#xA;  补的概念&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%a1%a5%e7%9a%84%e6%a6%82%e5%bf%b5&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;原码的特点是简单，直观，但是如果用原码做加法，一个正数和一个负数相加，结果的符号可正可负，需要找到一个与负数等价的正数来代替这个负数，假设一个时钟的时针指向六点，要想将时针指向三点方向，有两个办法，其一是将时针-3，其二是将时针 +9.可见-3 可用 +9 代替，这样将减法变为加法，称 +9 是-3 以 12 为模的补数。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/DqDgbCfcMoQeOUxrbcScCsK5nmg.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;结论&#34;&gt;&#xA;  结论&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%bb%93%e8%ae%ba&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;一个负数加上“模”即得该负数的补数&lt;/li&gt;&#xA;&lt;li&gt;一个整数和一个负数互为补数时，他们绝对值之和即为模数&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/AAf6bOTzvoBYChxWLu8cLkd8nId.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>数的定点与浮点表示</title>
      <link>//localhost:1313/posts/albudjdfbo53xcxxgxfcngwendl/</link>
      <pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/albudjdfbo53xcxxgxfcngwendl/</guid>
      <description>&lt;h1 id=&#34;数的定点表示与浮点表示&#34;&gt;&#xA;  数的定点表示与浮点表示&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%95%b0%e7%9a%84%e5%ae%9a%e7%82%b9%e8%a1%a8%e7%a4%ba%e4%b8%8e%e6%b5%ae%e7%82%b9%e8%a1%a8%e7%a4%ba&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;为什么要引入浮点表示&#34;&gt;&#xA;  为什么要引入浮点表示&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e5%bc%95%e5%85%a5%e6%b5%ae%e7%82%b9%e8%a1%a8%e7%a4%ba&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;编程困难，程序员要调节小数点的位置&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;数的表示范围小，为了能表示两个大小相差很大的数据，需要很长的机器字长。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;例如：太阳的质量为 &lt;code&gt;$0.2*10^{34}$&lt;/code&gt; 克，一个电子的质量大约为 &lt;code&gt;$0.9*10^{-27}$&lt;/code&gt; 克，两者差距为 &lt;code&gt;$10^{61}$&lt;/code&gt; 以上，若用定点数据表示：&lt;code&gt;$2^x &amp;gt; 10^{61}$&lt;/code&gt;，解得 &lt;code&gt;$x&amp;gt;203$&lt;/code&gt; 位。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;数据存储单元的利用率往往很低。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;浮点表示&#34;&gt;&#xA;  浮点表示&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%b5%ae%e7%82%b9%e8%a1%a8%e7%a4%ba&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/SjxJbtVI7o4GVuxKHBAcRnaMnxh.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;浮点数的表示形式&#34;&gt;&#xA;  浮点数的表示形式&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%b5%ae%e7%82%b9%e6%95%b0%e7%9a%84%e8%a1%a8%e7%a4%ba%e5%bd%a2%e5%bc%8f&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/CN8xb9OEBoLe7QxSEFzcQSVjnkg.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Sf 代表浮点数的符号&lt;/li&gt;&#xA;&lt;li&gt;n 其位数反映浮点数的精度&lt;/li&gt;&#xA;&lt;li&gt;m 其位数反映浮点数的表示范围&lt;/li&gt;&#xA;&lt;li&gt;jf 和 m 共同表示小数点的实际位置&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;浮点数的表示范围&#34;&gt;&#xA;  浮点数的表示范围&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%b5%ae%e7%82%b9%e6%95%b0%e7%9a%84%e8%a1%a8%e7%a4%ba%e8%8c%83%e5%9b%b4&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;上溢： 阶码 &amp;gt; 最大阶码&lt;/p&gt;&#xA;&lt;p&gt;下溢： 阶码 &amp;lt; 最小解码，按机器零处理&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/I6oNbiChsoQUZHx1ymScEbeqnWf.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;练习&#34;&gt;&#xA;  练习&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%bb%83%e4%b9%a0&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;设机器数字长为 24 位，欲表示 ±3 万的十进制数，试问在保证数的最大精度的前提下，除阶符、数符各取 1 位以外，阶码、尾数各取几位？&lt;/p&gt;</description>
    </item>
    <item>
      <title>系统总线</title>
      <link>//localhost:1313/posts/djvrdqjsmo7k3rx2kuhchwcnnkd/</link>
      <pubDate>Sat, 25 Apr 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/djvrdqjsmo7k3rx2kuhchwcnnkd/</guid>
      <description>&lt;h1 id=&#34;系统总线&#34;&gt;&#xA;  系统总线&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%b3%bb%e7%bb%9f%e6%80%bb%e7%ba%bf&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;总线的作用&#34;&gt;&#xA;  总线的作用&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%80%bb%e7%ba%bf%e7%9a%84%e4%bd%9c%e7%94%a8&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;总线是连接各个部件的信息传输线,是各个部件共享的传输介质.&lt;/p&gt;&#xA;&lt;h3 id=&#34;总线上的信息传送&#34;&gt;&#xA;  总线上的信息传送&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%80%bb%e7%ba%bf%e4%b8%8a%e7%9a%84%e4%bf%a1%e6%81%af%e4%bc%a0%e9%80%81&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;串行传输,每次只传送一个字节,也只接收一个字节.&lt;/li&gt;&#xA;&lt;li&gt;并行传输,每次传输多个字节,接收多个字节,但也要使用更多传输线.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;static&#34;&gt;&#xA;  ../static&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#static&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;单总线结构框图&#34;&gt;&#xA;  单总线结构框图&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%8d%95%e6%80%bb%e7%ba%bf%e7%bb%93%e6%9e%84%e6%a1%86%e5%9b%be&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;static/FJCDbIw5hoL05GxKiGPciUSon7c.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;将所有的设备全部连接到一条总线上,缺点是当某一个设备占用总线时,其他设备不能占用总线,导致整体运行效率降低.&lt;/p&gt;&#xA;&lt;h3 id=&#34;面向-cpu-的双总线结构框图&#34;&gt;&#xA;  面向 CPU 的双总线结构框图&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e9%9d%a2%e5%90%91-cpu-%e7%9a%84%e5%8f%8c%e6%80%bb%e7%ba%bf%e7%bb%93%e6%9e%84%e6%a1%86%e5%9b%be&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;static/LrC5bQNPKo9Fl4xiVfgcDdVbnJf.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;以 CPU 为中心,双总线结构在 CPU 与内存之间使用了一根专用的总线,由于 CPU 运算时的指令与数据全部来自主存,所以在 CPU 与主存间使用总线可以保证 CPU 的运行效率,并且不会影响 I/O 设备的使用,但如果 I/O 设备要和主存之间进行信息传输必须经过 CPU,导致 CPU 工作繁忙.&lt;/p&gt;&#xA;&lt;h3 id=&#34;以存储器为中心的双总线结构框图&#34;&gt;&#xA;  以存储器为中心的双总线结构框图&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%bb%a5%e5%ad%98%e5%82%a8%e5%99%a8%e4%b8%ba%e4%b8%ad%e5%bf%83%e7%9a%84%e5%8f%8c%e6%80%bb%e7%ba%bf%e7%bb%93%e6%9e%84%e6%a1%86%e5%9b%be&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;static/GaFmbs92DoscnexMSrlcfQrvnag.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;以主存为中心,这种结构不仅让 CPU 可以直接访问主存,也让 I/O 设备可以直接对主存进行存储操作.&lt;/p&gt;&#xA;&lt;h2 id=&#34;总线的分类&#34;&gt;&#xA;  总线的分类&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%80%bb%e7%ba%bf%e7%9a%84%e5%88%86%e7%b1%bb&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;片内总线,芯片内部的总线&lt;/p&gt;</description>
    </item>
    <item>
      <title>计组原理概述</title>
      <link>//localhost:1313/posts/a9otd7ynroeq2uxu3ifcvieen6u/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/a9otd7ynroeq2uxu3ifcvieen6u/</guid>
      <description>&lt;h1 id=&#34;计组原理概述&#34;&gt;&#xA;  计组原理概述&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%ae%a1%e7%bb%84%e5%8e%9f%e7%90%86%e6%a6%82%e8%bf%b0&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;如何使用计算机解决数学问题&#34;&gt;&#xA;  如何使用计算机解决数学问题&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8%e8%ae%a1%e7%ae%97%e6%9c%ba%e8%a7%a3%e5%86%b3%e6%95%b0%e5%ad%a6%e9%97%ae%e9%a2%98&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;建立数学模型&lt;/li&gt;&#xA;&lt;li&gt;确定计算方法&lt;/li&gt;&#xA;&lt;li&gt;编制解题程序&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;编程举例&#34;&gt;&#xA;  编程举例&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%bc%96%e7%a8%8b%e4%b8%be%e4%be%8b&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/Me2sbF8yQo6gLUxkkhRcIzO1nZc.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;程序清单&#34;&gt;&#xA;  程序清单&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%a8%8b%e5%ba%8f%e6%b8%85%e5%8d%95&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/D4txbW06xoKYgAxayY9cvZCWnvh.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;存储器的基本组成&#34;&gt;&#xA;  存储器的基本组成&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%ad%98%e5%82%a8%e5%99%a8%e7%9a%84%e5%9f%ba%e6%9c%ac%e7%bb%84%e6%88%90&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/XVVYbciiMoHm5XxwMEfc87nmnEh.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;存储体 - 存储单元 - 存储元件（1/0）&lt;/li&gt;&#xA;&lt;li&gt;大楼 - 房间 - 床位 （无人/有人）&lt;/li&gt;&#xA;&lt;li&gt;存储单元：存放一串二进制代码，每一个存储单元赋予一个地址&lt;/li&gt;&#xA;&lt;li&gt;存储子： 存储单元中二进制代码的组合&lt;/li&gt;&#xA;&lt;li&gt;存储字长： 存储单元中二进制代码的位数&lt;/li&gt;&#xA;&lt;li&gt;MAR ： 存储器地址寄存器，反应存储单元的个数&lt;/li&gt;&#xA;&lt;li&gt;MDR ： 存储器数据寄存器，反应存储字长&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;假设存储体为一个长方体，长方体的底面积为容纳的存储器地址，长方体的高为每一个存储器地址内的数据位，设 MAR=4bit，MDR=8bit，存储单元个数为 16，存储字长为 8.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;运算器的基本组成及操作过程&#34;&gt;&#xA;  运算器的基本组成及操作过程&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%bf%90%e7%ae%97%e5%99%a8%e7%9a%84%e5%9f%ba%e6%9c%ac%e7%bb%84%e6%88%90%e5%8f%8a%e6%93%8d%e4%bd%9c%e8%bf%87%e7%a8%8b&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/F14QbREUGoGz0exkEIDc0hm1nVc.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;加法操作过程&#34;&gt;&#xA;  加法操作过程&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%8a%a0%e6%b3%95%e6%93%8d%e4%bd%9c%e8%bf%87%e7%a8%8b&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/ISfdb1TRTokoOZxNYixc34zCnPe.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>计算机性能与发展</title>
      <link>//localhost:1313/posts/ufywdo5n8ou3xxxscsecelu5n9b/</link>
      <pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/ufywdo5n8ou3xxxscsecelu5n9b/</guid>
      <description>&lt;h1 id=&#34;计算机性能与发展&#34;&gt;&#xA;  计算机性能与发展&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%ae%a1%e7%ae%97%e6%9c%ba%e6%80%a7%e8%83%bd%e4%b8%8e%e5%8f%91%e5%b1%95&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;计算机硬件性能指标&#34;&gt;&#xA;  计算机硬件性能指标&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%a1%ac%e4%bb%b6%e6%80%a7%e8%83%bd%e6%8c%87%e6%a0%87&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;机器字长，CPU 一次能处理数据的位数与 CPU 中寄存器位数有关。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;运算速度&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主频&lt;/li&gt;&#xA;&lt;li&gt;核数，每个核支持的线程数&lt;/li&gt;&#xA;&lt;li&gt;吉普森法&lt;/li&gt;&#xA;&lt;li&gt;CPI 执行一条指令所需时钟周期数&lt;/li&gt;&#xA;&lt;li&gt;MIPS 每秒执行百万条指令&lt;/li&gt;&#xA;&lt;li&gt;FLOPS 每秒浮点运算次数&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;存储容量&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主存容量&#xA;&lt;ul&gt;&#xA;&lt;li&gt;存储单元个数 X 存储字长，如 MAR 与 MDR 容量，1Kx8 位.&lt;/li&gt;&#xA;&lt;li&gt;字节数，如 2^13b = 1KB.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;辅存容量&#xA;&lt;ul&gt;&#xA;&lt;li&gt;字节数 80GB.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;计算机发展及应用&#34;&gt;&#xA;  计算机发展及应用&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%8f%91%e5%b1%95%e5%8f%8a%e5%ba%94%e7%94%a8&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;1946 年，美国 ENIAC 生产了世界第一台 10 进制运算的计算机，一共 18000 多个电子管，1500 多个继电器 ，150 千瓦的功耗，30 吨重量，占地 1500 平方英尺，每秒钟可以进行 5000 次加法运算，需要手工搬动开关和拔插电缆来进行编程。&lt;/p&gt;&#xA;&lt;h3 id=&#34;硬件技术对计算机更新换代的影响&#34;&gt;&#xA;  硬件技术对计算机更新换代的影响&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%a1%ac%e4%bb%b6%e6%8a%80%e6%9c%af%e5%af%b9%e8%ae%a1%e7%ae%97%e6%9c%ba%e6%9b%b4%e6%96%b0%e6%8d%a2%e4%bb%a3%e7%9a%84%e5%bd%b1%e5%93%8d&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/QjXJbdFGAok2CaxeuIUcLwmtnDk.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;intel-公司的典型微处理器产品&#34;&gt;&#xA;  INtel 公司的典型微处理器产品&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intel-%e5%85%ac%e5%8f%b8%e7%9a%84%e5%85%b8%e5%9e%8b%e5%be%ae%e5%a4%84%e7%90%86%e5%99%a8%e4%ba%a7%e5%93%81&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/EA4qbXRS5oYp6bxH8epcqEkWnbf.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>冯诺依曼体系</title>
      <link>//localhost:1313/posts/o9dhdm5w5oitmzxg6mtci4vinob/</link>
      <pubDate>Tue, 14 Jan 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/o9dhdm5w5oitmzxg6mtci4vinob/</guid>
      <description>&lt;h1 id=&#34;冯诺依曼体系&#34;&gt;&#xA;  冯诺依曼体系&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%86%af%e8%af%ba%e4%be%9d%e6%9b%bc%e4%bd%93%e7%b3%bb&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;冯诺依曼简介&#34;&gt;&#xA;  冯诺依曼简介&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%86%af%e8%af%ba%e4%be%9d%e6%9b%bc%e7%ae%80%e4%bb%8b&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;约翰·冯·诺依曼，美籍匈牙利数学家、计算机科学家、物理学家，毕业于苏黎世联邦工业大学，他是现代电子计算机与博弈论的重要创始人，被后人称为现代计算机之父、博弈论之父，并且他还改善了著名的蒙特卡洛算法。&lt;/p&gt;&#xA;&lt;p&gt;1945 年 6 月约翰·冯·诺依曼与戈德斯坦、勃克斯等人，联名发表了一篇长达 101 页纸的报告，即计算机史上著名的“101 页报告”。在报告中冯·诺伊曼明确提出了计算机的体系架构。从 1951 年第一台电子计算机 EDVAC 开始，计算机经历了多次的更新换代，不管是最原始的、还是最先进的计算机，使用的仍然是冯·诺依曼最初设计的计算机体系结构。因此冯·诺依曼被世界公认为“计算机之父”，他设计的计算机系统结构，称为“冯诺依曼体系结构”。&lt;/p&gt;&#xA;&lt;h2 id=&#34;冯诺依曼体系-1&#34;&gt;&#xA;  冯诺依曼体系&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%86%af%e8%af%ba%e4%be%9d%e6%9b%bc%e4%bd%93%e7%b3%bb-1&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;冯诺依曼体系结构主要由五大部分组成，分别是控制器，运算器，存储器，输入设备和输出设备。至今为止，基本上所有的计算机也是遵循冯诺依曼体系所设计的，例如我们经常使用的手机，电脑，平板等等。&lt;/p&gt;&#xA;&lt;p&gt;冯诺依曼提出的两个重要的思想，一个是存储程序的思想，另一个是二进制的思想，这两个思想在如今的计算机领域影响深远。&lt;/p&gt;&#xA;&lt;p&gt;世界上第一台计算机 EDVAC，采用了上千个电子管所设计的，体积十分庞大，设计者采用十进制对指令和数据进行计算处理，但执行过程复杂，运行效率慢。十进制与二进制的区别在哪？冯诺依曼为何提出二进制的存储思想呢？因为在早期的计算机电子元件设计中，通常使用高低电压来表示信息，即高电压为 1，低电压为 0.所以如果要采用十进制进行数据的计算，将二进制信息转换成我们日常所熟悉的十进制后再去进行处理，大大增加了计算机指令的设计难度，而使用二进制则解决了这一问题，后世很多科学家也提出了二进制浮点数的计算，以及反码补码阶码的概念，使二进制成为了计算机设计的中心。所以在今后的计算机中无论是指令还是数据都采用二进制的方式进行存储和计算。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/PwAAbMnQ5om7C0xEbKIcZHr1nTh.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;通常我们使用的计算机主要功能是负责运算，所以在冯诺依曼体系中以运算器为中心，而存储器负责存放指令和数据，指令和数据的计算和存储以及外部设备的连接也需要通过控制器进行控制。让我们排除输入输出设备之后，其实运算器，存储器和控制器才是整个计算机的核心，我们可以将三者看作一个黑箱子。当我们输入数据时，数据通过黑箱子，然后输出我们想要的结果，这便是图灵机的简单模型。&lt;/p&gt;&#xA;&lt;h2 id=&#34;冯诺依曼体系的特点&#34;&gt;&#xA;  冯诺依曼体系的特点&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%86%af%e8%af%ba%e4%be%9d%e6%9b%bc%e4%bd%93%e7%b3%bb%e7%9a%84%e7%89%b9%e7%82%b9&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;计算机由五大部件组成，运算器，存储器，控制器，输入设备，输出设备。&lt;/li&gt;&#xA;&lt;li&gt;指令和数据采用二进制方式进行存储。&lt;/li&gt;&#xA;&lt;li&gt;指令由地址码和操作码组成。&lt;/li&gt;&#xA;&lt;li&gt;运算器为中心。&lt;/li&gt;&#xA;&lt;li&gt;存储程序为主要思想。&lt;/li&gt;&#xA;&lt;li&gt;指令和数据都以同等地位存入存储器，并且可按地址访问。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;冯诺依曼体系结构的改进&#34;&gt;&#xA;  冯诺依曼体系结构的改进&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%86%af%e8%af%ba%e4%be%9d%e6%9b%bc%e4%bd%93%e7%b3%bb%e7%bb%93%e6%9e%84%e7%9a%84%e6%94%b9%e8%bf%9b&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;如上图所示，输入设备如果需要从存储器中存储信息，必须经过运算器，因此运算器可能成为计算机速度的瓶颈，如果可以使输入设备不经过运算器，直接访问存储器，可以减少运算器的工作量，因此有了以下以存储器为中心的结构。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/F0BcbxSBcoOLiNxWRC0cH0ZBnge.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;由于现代计算机分为运算器，控制器，存储器，输入设备，输出设备。运算器(ALU)与控制器(CU)合并为 CPU，存储器分为主存与辅存，CPU 与存储器构成主机部分，主机与 IO 设备构成计算机硬件，可以根据计算机的层次进行设计。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/Ylx8bUpvpohWj6xLKMIcpmX2nec.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
