<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据结构 on inaho</title>
    <link>//localhost:1313/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
    <description>Recent content in 数据结构 on inaho</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 03 Jan 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>哈夫曼编码</title>
      <link>//localhost:1313/posts/ik5gdbbkpos6lbxoqdecf6ocn1g/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/ik5gdbbkpos6lbxoqdecf6ocn1g/</guid>
      <description>&lt;h1 id=&#34;哈夫曼编码&#34;&gt;&#xA;  哈夫曼编码&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%93%88%e5%a4%ab%e6%9b%bc%e7%bc%96%e7%a0%81&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h1 id=&#34;哈夫曼树&#34;&gt;&#xA;  哈夫曼树&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%93%88%e5%a4%ab%e6%9b%bc%e6%a0%91&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;哈夫曼树的基本概念&#34;&gt;&#xA;  哈夫曼树的基本概念&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%93%88%e5%a4%ab%e6%9b%bc%e6%a0%91%e7%9a%84%e5%9f%ba%e6%9c%ac%e6%a6%82%e5%bf%b5&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;哈夫曼树又称为最优树，是一类带权路径长度最短的树，在实际中有广泛的应用。&lt;/li&gt;&#xA;&lt;li&gt;路径： 从树中一个结点到另一个结点之间的分支构成这两个结点之间的路径&lt;/li&gt;&#xA;&lt;li&gt;路径长度：路径上的分支数目称作路径的长度&lt;/li&gt;&#xA;&lt;li&gt;树的路径长度：从树根到每一结点的路径长度之和&lt;/li&gt;&#xA;&lt;li&gt;权：赋予某个实体的一个量，是对实体的某个或某些属性的数值化描述，在数据结构中实体有结点和边两大类，对应有结点权和边权。&lt;/li&gt;&#xA;&lt;li&gt;结点的带权路径长度：从该结点到树根之间的路径长度与结点上权的乘积。&lt;/li&gt;&#xA;&lt;li&gt;树的带权路径长度：树中所有叶子结点的带权路径长度之和，记作&lt;code&gt;$WPL = \sum_{k=1}^n w_kl_k$&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;哈夫曼树：假设有 m 个权值&lt;code&gt;$w_1,w_2…,w_m$&lt;/code&gt;,可以构造一棵含 n 个叶子结点的二叉树，每个叶子结点的权为&lt;code&gt;$w_i$&lt;/code&gt;，则其中带权路径长度 WPL 最小的二叉树称作最优二叉树或哈夫曼树。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;下图所示的三种二叉树都含有四个带权叶子结点，带权结点分别 a(8),b(2),c(3),d(6).&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/XiZBbo9ZmowL1xxreSbcQQ8nn8c.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;从图中可以看出，叶子结点所在的位置不同，构成的二叉树 WPL 也不同，可以直观的发现，在哈夫曼树中，权值越大的结点距离根结点的距离越近。&lt;/p&gt;&#xA;&lt;h2 id=&#34;哈夫曼树的构造过程&#34;&gt;&#xA;  哈夫曼树的构造过程&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%93%88%e5%a4%ab%e6%9b%bc%e6%a0%91%e7%9a%84%e6%9e%84%e9%80%a0%e8%bf%87%e7%a8%8b&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;根据给定的 n 个权值&lt;code&gt;$w_1,w_2,…w_n$&lt;/code&gt;,构造 n 棵只有根结点的二叉树，这 n 棵二叉树构成一个森林 F。&lt;/li&gt;&#xA;&lt;li&gt;在森林 F 中选取两棵根结点的权值最小的树作为左右子树构造一棵新的二叉树，且置新的二叉树的根结点的权值为其左、右子树上根结点的权值之和。&lt;/li&gt;&#xA;&lt;li&gt;在森林 F 中删除这两棵子树，同时将新得到的二叉树加入 F 中&lt;/li&gt;&#xA;&lt;li&gt;重复第二步和第三步，直到 F 只含一棵树为止，这棵树便是哈夫曼树。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;如下图所示为叶子结点&lt;code&gt;$a(7),b(5),c(2),d(4)$&lt;/code&gt;的哈夫曼树的构造过程：&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../static/H5YOb47yDoWb5SxzjUScUHDLnVd.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;首先对叶子结点的权值进行排序，然后选择权值最小的两个结点分别作为新二叉树的左右子树，新二叉树的根结点为左右子树权值之和，接着依然对新二叉树的根结点与其余两个叶子结点排序，然后再次选择权值最小的两个结点作为左右子树构造新二叉树，直到只剩下最后一棵树，则构造完毕。&lt;/p&gt;&#xA;&lt;h2 id=&#34;哈夫曼树的存储结构&#34;&gt;&#xA;  哈夫曼树的存储结构&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%93%88%e5%a4%ab%e6%9b%bc%e6%a0%91%e7%9a%84%e5%ad%98%e5%82%a8%e7%bb%93%e6%9e%84&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;哈夫曼树是一种二叉树，可以采用二叉树的存储方法实现，由于哈夫曼树中没有度为 1 的结点，则一棵有 n 个叶子结点的哈夫曼树共有 2n-1 个结点，可以存储在一个大小为 2n-1 的数组中，树中每个结点包含其双亲信息和孩子结点的信息，存储结构可以如下设计：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
