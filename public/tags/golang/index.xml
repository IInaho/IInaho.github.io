<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on inaho</title>
    <link>//localhost:1313/tags/golang/</link>
    <description>Recent content in Golang on inaho</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 24 Feb 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>pprof 性能分析</title>
      <link>//localhost:1313/posts/ls4ud9irwopxjyxo2socs7ionyg/</link>
      <pubDate>Sat, 24 Feb 2024 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/ls4ud9irwopxjyxo2socs7ionyg/</guid>
      <description>&lt;h1 id=&#34;pprof-性能分析&#34;&gt;&#xA;  pprof 性能分析&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#pprof-%e6%80%a7%e8%83%bd%e5%88%86%e6%9e%90&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;概要&#34;&gt;&#xA;  概要&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%a6%82%e8%a6%81&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在 golang 项目开发测试过程中，程序经常会出现各种崩溃卡死的恶性 bug，例如内存飙升、CPU 占用太高、Goroutine 泄露等，有些仅从代码层面无法排查到，这时候就需要借助 pprof 工具来排查问题。&lt;/p&gt;&#xA;&lt;h2 id=&#34;简要介绍&#34;&gt;&#xA;  简要介绍&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%ae%80%e8%a6%81%e4%bb%8b%e7%bb%8d&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;pprof 工具集，提供了 Go 程序内部多种性能指标的采样能力，我们常会用到的性能采样指标有这些：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;profile：默认进行 30s 的 CPU Profiling，得到一个分析用的 profile 文件，访问路径为 &lt;code&gt;$HOST/debug/pprof/profile&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;heap：查看活动对象的内存分配情况， 访问路径为 &lt;code&gt;$HOST/debug/pprof/heap&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;goroutine：查看当前所有运行的 goroutines 堆栈跟踪，访问路径为 &lt;code&gt;$HOST/debug/pprof/goroutine&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;allocs: 查看过去所有内存分配的样本，访问路径为 &lt;code&gt;$HOST/debug/pprof/allocs&lt;/code&gt;(包括已经被 GC 回收的内存)&lt;/li&gt;&#xA;&lt;li&gt;threadcreate：查看创建新 OS 线程的堆栈跟踪，访问路径为 &lt;code&gt;$HOST/debug/pprof/threadcreate&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;mutex：查看导致互斥锁的竞争持有者的堆栈跟踪，访问路径为 &lt;code&gt;$HOST/debug/pprof/mutex&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;block：查看导致阻塞同步的堆栈跟踪，访问路径为 &lt;code&gt;$HOST/debug/pprof/block&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;分析方式主要分为两种：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;根据 pprof 工具基于 web 图形界面进行分析&lt;/li&gt;&#xA;&lt;li&gt;基于交互式的命令行进行分析&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;web-界面分析&#34;&gt;&#xA;  Web 界面分析&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#web-%e7%95%8c%e9%9d%a2%e5%88%86%e6%9e%90&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;链接到标题&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;链接到标题&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// pprof的init函数会将pprof里的一些handler注册到http.DefaultServeMux上_&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;net/http/pprof&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ListenAndServe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;0.0.0.0:8080&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// http://0.0.0.0:8080/debug/pprof/goroutine?debug=1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在对应的访问路径上新增 &lt;code&gt;?debug=1&lt;/code&gt; 的话，就可以直接在浏览器访问&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
